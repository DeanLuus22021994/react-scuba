#!/usr/bin/env node
/* eslint-disable no-console */

/**
 * CSS Consolidation Script
 *
 * Consolidates multiple CSS files into a single index.css file
 * to resolve PostCSS @import ordering warnings in Tailwind v4.
 *
 * Usage:
 *   node scripts/consolidate-css.js
 *   npm run consolidate:css
 *
 * This script:
 * 1. Reads all CSS files from src/styles/
 * 2. Combines them in the correct order
 * 3. Writes to src/index.css with proper Tailwind v4 imports
 * 4. Maintains a clean structure without nested @imports
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES Module equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename); // Configuration
const STYLES_DIR = path.join(__dirname, '../src/styles');
const OUTPUT_FILE = path.join(__dirname, '../src/index.css');
const BACKUP_FILE = path.join(__dirname, '../src/index.css.backup');

// CSS files to consolidate in order
const CSS_FILES = [
  'index.css', // Base styles
  'utilities.css', // Custom utilities
  'components.css', // Component styles
  'animations.css', // Animations
];

// Header template for the consolidated file
const HEADER = `/**
 * Main Stylesheet
 * Tailwind v4 with custom components and utilities
 * Consolidated to resolve PostCSS @import ordering warnings
 *
 * Generated by: scripts/consolidate-css.js
 * Last updated: ${new Date().toISOString()}
 */

/* Tailwind v4 - Using single @import for all layers */
@import "tailwindcss";
@config "../tailwind.config.js";

`;

/**
 * Read a CSS file and return its content
 */
function readCSSFile(filename) {
  const filePath = path.join(STYLES_DIR, filename);

  if (!fs.existsSync(filePath)) {
    console.warn(`‚ö†Ô∏è  Warning: ${filename} not found, skipping...`);
    return '';
  }

  const content = fs.readFileSync(filePath, 'utf8');

  // Add section header
  const sectionName = filename.replace('.css', '').toUpperCase();
  return `\n/* ========================================\n   ${sectionName}\n   ======================================== */\n\n${content}`;
}

/**
 * Create backup of existing index.css
 */
function createBackup() {
  if (fs.existsSync(OUTPUT_FILE)) {
    fs.copyFileSync(OUTPUT_FILE, BACKUP_FILE);
    console.log(`üìã Backed up existing index.css`);
  }
}

/**
 * Main consolidation function
 */
function consolidateCSS() {
  console.log('üé® CSS Consolidation Tool\n');
  console.log('================================\n');

  // Create backup
  createBackup();

  // Start with header
  let consolidatedCSS = HEADER;

  // Read and append each CSS file
  console.log('üìñ Reading CSS files:\n');
  CSS_FILES.forEach((filename) => {
    console.log(`   - ${filename}`);
    const content = readCSSFile(filename);
    consolidatedCSS += content;
  });

  // Write consolidated file
  fs.writeFileSync(OUTPUT_FILE, consolidatedCSS, 'utf8');

  // Calculate statistics
  const lines = consolidatedCSS.split('\n').length;
  const size = (fs.statSync(OUTPUT_FILE).size / 1024).toFixed(2);

  console.log('\n‚úÖ Consolidation complete!\n');
  console.log('================================\n');
  console.log(`üìÑ Output: ${path.relative(process.cwd(), OUTPUT_FILE)}`);
  console.log(`üìè Lines: ${lines}`);
  console.log(`üíæ Size: ${size} KB`);
  console.log(`üì¶ Files merged: ${CSS_FILES.length}`);

  if (fs.existsSync(BACKUP_FILE)) {
    console.log(`\nüí° Backup saved: ${path.relative(process.cwd(), BACKUP_FILE)}`);
    console.log('   Restore with: mv src/index.css.backup src/index.css');
  }

  console.log('\n‚ú® Ready for build!');
}

/**
 * Validate that all required directories exist
 */
function validateEnvironment() {
  if (!fs.existsSync(STYLES_DIR)) {
    console.error(`‚ùå Error: Styles directory not found: ${STYLES_DIR}`);
    process.exit(1);
  }

  const srcDir = path.dirname(OUTPUT_FILE);
  if (!fs.existsSync(srcDir)) {
    console.error(`‚ùå Error: Source directory not found: ${srcDir}`);
    process.exit(1);
  }
}

// Run the script
validateEnvironment();
consolidateCSS();
