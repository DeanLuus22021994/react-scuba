# ==============================================================================
# docker-compose.yml - Full Stack Orchestration
# ==============================================================================
#
# Single command deployment: docker compose up
# Includes core service tiers via modular compose fragments + MCP services
#
# DEPLOYMENT PROFILES:
#   minimal       - DevContainer essentials (3 services: node-tools + 2 MCP)
#   base          - + databases & cache (postgres, mariadb, redis, memcached)
#   app           - + application services (node-api, node-web)
#   monitoring    - + metrics & visualization (prometheus, grafana, exporters)
#   loadbalancing - + nginx reverse proxy
#   gpu           - + NVIDIA GPU & Ollama LLM inference
#   mcp           - + MCP persistent services (python-mcp-sidecar, discovery)
#   full          - All services (30 total)
#
# USAGE:
#   docker compose --profile full up              # Full cluster (30 services)
#   docker compose --profile minimal up           # Minimal (3 services)
#   docker compose --profile mcp up               # MCP services only (2 services)
#   docker compose up --build                      # Build + start with full profile
#

# ==== YAML Anchors for Reusable Patterns ====
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &restart-unless-stopped
  restart: unless-stopped

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 5s
  retries: 3
  start_period: 20s

x-deploy-small: &deploy-small
  resources:
    limits:
      cpus: "0.5"
      memory: 256M
    reservations:
      cpus: "0.25"
      memory: 128M

x-deploy-medium: &deploy-medium
  resources:
    limits:
      cpus: "1.0"
      memory: 512M
    reservations:
      cpus: "0.5"
      memory: 256M

x-deploy-large: &deploy-large
  resources:
    limits:
      cpus: "2.0"
      memory: 2048M
    reservations:
      cpus: "1.0"
      memory: 1024M

x-env-file: &default-env-file
  - devcontainer.env

services:
  # ==== Python MCP Persistent Sidecar Service ====
  python-mcp-sidecar:
    build:
      context: ./docker-compose-examples/mcp/python_utils
      dockerfile: ../../../.devcontainer/infrastructure/mcp-servers/python/dockerfile
      args:
        PYTHON_VERSION: "3.14t"
        UV_VERSION: "latest"
    image: python-mcp-sidecar:latest
    container_name: python-mcp-sidecar
    hostname: python-mcp-sidecar
    profiles:
      - full
      - minimal
      - mcp
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.99
    ports:
      - "9099"
    env_file: *default-env-file
    environment:
      - ENABLE_MCP=${ENABLE_MCP:-false}
      - MCP_HTTP_PORT=9099
      - MCP_PROTOCOL_VERSION=1.0.0
      - PYTHONUNBUFFERED=1
      - UV_SYSTEM_PYTHON=1
      - PYTHON_GIL_MODE=1
    volumes:
      - ./docker-compose-examples/mcp/python_utils:/app:ro
      - python-mcp-packages:/usr/local/lib/python3.14/site-packages
      - python-mcp-state:/data
      - python-mcp-cache:/cache/python
      - python-mcp-uv-cache:/cache/uv
    working_dir: /app
    command: ["python", "-m", "utils.mcp_server"]
    stdin_open: true
    tty: true
    <<: *restart-unless-stopped
    deploy:
      <<: *deploy-medium
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-m",
          "utils.health",
          "--protocol-validation",
          "--endpoint",
          "http://localhost:9099/health",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ==== Service Discovery & Health Monitor ====
  mcp-discovery-agent:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/discovery
      dockerfile: dockerfile
    image: mcp-discovery-agent:latest
    container_name: mcp-discovery-agent
    hostname: mcp-discovery-agent
    profiles:
      - full
      - minimal
      - mcp
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.98
    ports:
      - "9097:9097"
    env_file: *default-env-file
    environment:
      - MCP_DISCOVERY_ENABLED=true
      - MCP_HEALTH_WEBSOCKET_PORT=9097
      - MCP_SERVICES=python-mcp-sidecar:9099
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - mcp-discovery-state:/data
    <<: *restart-unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9097/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s
    depends_on:
      python-mcp-sidecar:
        condition: service_healthy

include:
  # ==== Database Services ====
  - .devcontainer/infrastructure/databases/postgres/docker-compose.postgres.yml
  - .devcontainer/infrastructure/databases/mariadb/docker-compose.mariadb.yml

  # ==== Cache Services ====
  - .devcontainer/infrastructure/cache/memcached/docker-compose.memcached.yml
  - .devcontainer/infrastructure/cache/redis/docker-compose.redis.yml
  - .devcontainer/infrastructure/cache/minio/docker-compose.minio.yml

  # ==== Application Services ====
  - .devcontainer/infrastructure/services/api/docker-compose.api.yml
  - .devcontainer/infrastructure/services/web/docker-compose.web.yml
  - .devcontainer/infrastructure/services/buildx/docker-compose.buildx.yml

  # ==== Monitoring Services ====
  - .devcontainer/infrastructure/monitoring/prometheus/docker-compose.prometheus.yml
  - .devcontainer/infrastructure/monitoring/grafana/docker-compose.grafana.yml
  - .devcontainer/infrastructure/monitoring/exporters/postgres/docker-compose.postgres-exporter.yml
  - .devcontainer/infrastructure/monitoring/exporters/mysql/docker-compose.mysql-exporter.yml
  - .devcontainer/infrastructure/monitoring/exporters/cadvisor/docker-compose.cadvisor.yml
  - .devcontainer/infrastructure/monitoring/exporters/node/docker-compose.node-exporter.yml

  # ==== Networking Services ====
  - .devcontainer/infrastructure/networking/nginx/docker-compose.nginx.yml

  # ==== GPU Services ====
  - .devcontainer/infrastructure/services/nvidia/docker-compose.nvidia.yml
  - .devcontainer/infrastructure/services/ollama/docker-compose.ollama.yml

# MCP-specific volumes (others declared in individual compose files)
volumes:
  python-mcp-packages:
    name: python-mcp-packages
  python-mcp-state:
    name: python-mcp-state
  python-mcp-cache:
    name: python-mcp-cache
  python-mcp-uv-cache:
    name: python-mcp-uv-cache
  mcp-discovery-state:
    name: mcp-discovery-state

# Network configuration (shared by all included services)
networks:
  mcp-cluster:
    name: mcp-cluster
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
