# Docker Compose MCP Cluster - Infrastructure Services Only
# MCP stdio servers (filesystem, git, fetch, github, memory) configured in devcontainer.json
# Single command: docker-compose -f .devcontainer/docker-compose.mcp.yml up --build
# Tier 1: Databases → Tier 2: MCP DB Services → Tier 3: Tools → Tier 4: DevContainer

services:
  # ==== TIER 1: Databases (starts first) ====
  postgres-db:
    image: postgres:16-alpine
    container_name: postgres-db
    hostname: postgres-db
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.20
    ports:
      - "5432:5432"
    env_file:
      - devcontainer.env
    environment:
      - POSTGRES_PASSWORD=${DOCKER_POSTGRES_PASSWORD:-password}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    volumes:
      - react_scuba_postgres-data:/var/lib/postgresql/data
    command:
      - postgres
      - -c
      - shared_buffers=64MB
      - -c
      - max_connections=50
      - -c
      - work_mem=4MB
      - -c
      - maintenance_work_mem=32MB
      - -c
      - effective_cache_size=128MB
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped
    stop_grace_period: 10s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s

  mariadb:
    image: mariadb:11-jammy
    container_name: mariadb
    hostname: mariadb
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.21
    ports:
      - "3306:3306"
    env_file:
      - devcontainer.env
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_PASSWORD:-password}
      - MARIADB_DATABASE=mcp_db
    volumes:
      - react_scuba_mariadb-data:/var/lib/mysql
    command: --innodb-buffer-pool-size=256M --max-connections=200
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s

  # ==== TIER 2: MCP Database Services (after databases) ====
  postgres-mcp:
    build:
      context: ./.devcontainer/containers
      dockerfile: dockerfile.postgre
    image: mcp-postgres:latest
    container_name: postgres-mcp
    hostname: postgres-mcp
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.31
    env_file:
      - devcontainer.env
    environment:
      - POSTGRES_CONNECTION=postgresql://postgres:${DOCKER_POSTGRES_PASSWORD:-password}@postgres-db:5432/postgres
    volumes:
      - react_scuba_postgres-node-cache:/cache/node
      - react_scuba_postgres-cache:/cache/pg
    stdin_open: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('healthy')"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      postgres-db:
        condition: service_healthy

  mariadb-mcp:
    build:
      context: ./.devcontainer/containers
      dockerfile: Dockerfile.mariadb
    image: mcp-mariadb:latest
    container_name: mariadb-mcp
    hostname: mariadb-mcp
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.32
    env_file:
      - devcontainer.env
    environment:
      - MARIADB_CONNECTION=mysql://root:${MARIADB_PASSWORD:-password}@mariadb:3306/mcp_db
      - MARIADB_PASSWORD=${MARIADB_PASSWORD:-password}
    volumes:
      - react_scuba_mariadb-node-cache:/cache/node
      - react_scuba_mariadb-cache:/cache/mariadb
    stdin_open: true
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "mariadb",
          "-h",
          "mariadb",
          "-u",
          "root",
          "-p${MARIADB_PASSWORD:-password}",
          "-e",
          "SELECT 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 25s
    depends_on:
      mariadb:
        condition: service_healthy

  # ==== TIER 3: Experimental & Tools (after databases) ====
  # python-experimental:
  #   build:
  #     context: ./mcp
  #     dockerfile: Dockerfile.python.exp
  #   image: python-experimental:3.15.0a1
  #   container_name: python-experimental
  #   hostname: python-experimental
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.40
  #   env_file:
  #     - devcontainer.env
  #   volumes:
  #     - python-exp-cache:/cache/python
  #     - ../:/workspace
  #   working_dir: /workspace
  #   stdin_open: true
  #   tty: true
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "python3", "/app/health.py"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 15s

  # k8s-plugin:
  #   build:
  #     context: ./containers/k8s-plugin
  #     dockerfile: Dockerfile
  #   image: k8s-plugin:latest
  #   container_name: k8s-plugin
  #   hostname: k8s-plugin
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.50
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   environment:
  #     - NVIDIA_VISIBLE_DEVICES=all
  #     - NVIDIA_DRIVER_CAPABILITIES=compute,utility
  #   volumes:
  #     - k8s-config:/root/.kube
  #     - k8s-cache:/cache/k8s
  #   env_file:
  #     - devcontainer.env
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "nvidia-smi"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  buildkit:
    image: moby/buildkit:latest
    container_name: buildkit-daemon
    hostname: buildkit
    privileged: true
    ports:
      - "1234:1234"
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.55
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - react_scuba_buildkit-cache:/var/lib/buildkit
      - react_scuba_buildkit-tmp:/tmp
    environment:
      - BUILDKIT_STEP_LOG_MAX_SIZE=10485760
    command:
      - --addr
      - tcp://0.0.0.0:1234
      - --oci-worker-gc=true
      - --oci-worker-gc-keepstorage=5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "buildctl", "debug", "info"]
      interval: 30s
      timeout: 10s
      retries: 3

  runner:
    build:
      context: ./.devcontainer/containers/runner
      dockerfile: Dockerfile
    container_name: github-runner
    hostname: github-runner
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.56
    env_file:
      - devcontainer.env
    volumes:
      - react_scuba_runner-work:/home/runner/_work
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "Runner.Listener"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==== Gateway Monitoring Stack ====
  # cAdvisor - Container metrics exporter
  # cadvisor:
  #   build:
  #     context: ./exporters
  #     dockerfile: dockerfile.cadvisor
  #   image: mcp-cadvisor:latest
  #   container_name: mcp-cadvisor
  #   hostname: cadvisor
  #   privileged: true
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.75
  #   ports:
  #     - "8081:8080"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   devices:
  #     - /dev/kmsg
  #   restart: unless-stopped
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--quiet",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:8080/healthz",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Node Exporter - Host metrics
  # node-exporter:
  #   build:
  #     context: ./exporters
  #     dockerfile: dockerfile.node
  #   image: mcp-node-exporter:latest
  #   container_name: mcp-node-exporter
  #   hostname: node-exporter
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.76
  #   ports:
  #     - "9100:9100"
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - "--path.procfs=/host/proc"
  #     - "--path.sysfs=/host/sys"
  #     - "--path.rootfs=/rootfs"
  #     - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
  #   restart: unless-stopped
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--quiet",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:9100/metrics",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # PostgreSQL Exporter
  # postgres-exporter:
  #   build:
  #     context: ./exporters
  #     dockerfile: dockerfile.postgres
  #   image: mcp-postgres-exporter:latest
  #   container_name: mcp-postgres-exporter
  #   hostname: postgres-exporter
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.77
  #   ports:
  #     - "9187:9187"
  #   environment:
  #     - DATA_SOURCE_NAME=postgresql://postgres:${DOCKER_POSTGRES_PASSWORD:-password}@postgres-db:5432/postgres?sslmode=disable
  #   restart: unless-stopped
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--quiet",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:9187/",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   depends_on:
  #     postgres-db:
  #       condition: service_healthy

  # MySQL/MariaDB Exporter
  # mysql-exporter:
  #   build:
  #     context: ./exporters
  #     dockerfile: dockerfile.mysql
  #   image: mcp-mysql-exporter:latest
  #   container_name: mcp-mysql-exporter
  #   hostname: mysql-exporter
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.78
  #   ports:
  #     - "9104:9104"
  #   env_file:
  #     - devcontainer.env
  #   environment:
  #     - DATA_SOURCE_NAME=root:${MARIADB_PASSWORD:-password}@tcp(mariadb:3306)/
  #   command:
  #     - --collect.global_status
  #     - --collect.info_schema.innodb_metrics
  #     - --collect.auto_increment.columns
  #     - --collect.info_schema.processlist
  #     - --collect.binlog_size
  #     - --collect.info_schema.tablestats
  #     - --collect.global_variables
  #     - --collect.info_schema.query_response_time
  #     - --collect.info_schema.userstats
  #     - --collect.info_schema.tables
  #     - --collect.perf_schema.tablelocks
  #     - --collect.perf_schema.file_events
  #     - --collect.perf_schema.eventswaits
  #     - --collect.perf_schema.indexiowaits
  #     - --collect.perf_schema.tableiowaits
  #     - --collect.slave_status
  #     - --web.listen-address=:9104
  #   restart: unless-stopped
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--quiet",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:9104/metrics",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   depends_on:
  #     mariadb:
  #       condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: tbc-nginx
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.70
    volumes:
      - ./.devcontainer/containers/gateway/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./.devcontainer/containers/gateway/config/ssl:/etc/nginx/ssl:ro
    env_file:
      - devcontainer.env
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: tbc-prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.71
    volumes:
      - type: bind
        source: ./.devcontainer/containers/gateway/config/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - react_scuba_prometheus-data:/prometheus
    env_file:
      - devcontainer.env
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: tbc-grafana
    hostname: grafana
    ports:
      - "3000:3000"
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.72
    volumes:
      - react_scuba_grafana-data:/var/lib/grafana
      - ./.devcontainer/containers/gateway/config/grafana/provisioning:/etc/grafana/provisioning:ro
    env_file:
      - devcontainer.env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/json/mcp-cluster-overview.json
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==== TIER 4: DevContainer (after all services) ====
  # react-app-dev:
  #   build:
  #     context: ./server
  #     dockerfile: ../.devcontainer/Dockerfile.dev
  #   image: react-app-dev:latest
  #   container_name: react-app-dev
  #   hostname: react-app-dev
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.59
  #   ports:
  #     - "3001:5173"
  #     - "4173:4173"
  #   environment:
  #     - NODE_ENV=development
  #     - VITE_PORT=5173
  #     - VITE_HOST=0.0.0.0
  #   env_file:
  #     - devcontainer.env
  #   volumes:
  #     - ../server:/app:rw
  #     - react_node_modules:/app/node_modules
  #     - react-vite-cache:/app/.vite
  #     - react-npm-cache:/root/.npm
  #   working_dir: /app
  #   command: ["npm", "start"]
  #   stdin_open: true
  #   tty: true
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "2.0"
  #         memory: 1024M
  #       reservations:
  #         memory: 512M
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "wget --quiet --tries=1 --spider http://localhost:5173 || exit 1",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  node-builder:
    build:
      context: .
      dockerfile: .devcontainer/containers/Dockerfile.node
    image: react-scuba-node:latest
    container_name: node-builder
    hostname: node-builder
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.61
    volumes:
      - ./server:/workspace
      - react_scuba_node-builder-node-modules:/cache/node_modules
      - react_scuba_node-builder-npm:/cache/npm
      - react_scuba_node-builder-turbo:/cache/turbo
      - react_scuba_node-builder-git-hooks:/cache/git-hooks
      - react_scuba_node-builder-husky:/cache/husky
    working_dir: /workspace
    environment:
      - NODE_ENV=development
      - TURBO_TELEMETRY_DISABLED=1
    env_file:
      - devcontainer.env
    command: /sbin/tini -- tail -f /dev/null
    stdin_open: true
    tty: true
    restart: unless-stopped

  # devcontainer:
  #   build:
  #     context: .
  #     dockerfile: ./.devcontainer/Dockerfile.dev
  #   image: mcp-devcontainer:latest
  #   container_name: devcontainer
  #   hostname: devcontainer
  #   networks:
  #     mcp-cluster:
  #       ipv4_address: 172.20.0.60
  #   ports:
  #     - "5173:5173"
  #     - "8080:8080"
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: all
  #             capabilities: [gpu, compute, utility]
  #   environment:
  #     - NVIDIA_VISIBLE_DEVICES=all
  #     - NVIDIA_DRIVER_CAPABILITIES=compute,utility
  #   env_file:
  #     - devcontainer.env
  #   volumes:
  #     - ../:/workspaces
  #     - devcontainer-cache:/cache
  #   working_dir: /workspaces
  #   command: sleep infinity
  #   stdin_open: true
  #   tty: true
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "node", "--version"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 20s
  #   depends_on:
  #     postgres-db:
  #       condition: service_healthy
  #     mariadb:
  #       condition: service_healthy

# Named volumes for persistence
volumes:
  react_scuba_postgres-data:
    name: react_scuba_postgres-data
  react_scuba_postgres-node-cache:
    name: react_scuba_postgres-node-cache
  react_scuba_postgres-cache:
    name: react_scuba_postgres-cache
  react_scuba_mariadb-data:
    name: react_scuba_mariadb-data
  react_scuba_mariadb-node-cache:
    name: react_scuba_mariadb-node-cache
  react_scuba_mariadb-cache:
    name: react_scuba_mariadb-cache
  react_scuba_python-exp-cache:
    name: react_scuba_python-exp-cache
  react_scuba_k8s-config:
    name: react_scuba_k8s-config
  react_scuba_k8s-cache:
    name: react_scuba_k8s-cache
  react_scuba_buildkit-cache:
    name: react_scuba_buildkit-cache
  react_scuba_buildkit-tmp:
    name: react_scuba_buildkit-tmp
  react_scuba_runner-work:
    name: react_scuba_runner-work
  react_scuba_runner-cache:
    name: react_scuba_runner-cache
  react_scuba_prometheus-data:
    name: react_scuba_prometheus-data
  react_scuba_grafana-data:
    name: react_scuba_grafana-data
  react_scuba_devcontainer-cache:
    name: react_scuba_devcontainer-cache
  react_scuba_node-builder-node-modules:
    name: react_scuba_node-builder-node-modules
  react_scuba_node-builder-npm:
    name: react_scuba_node-builder-npm
  react_scuba_node-builder-turbo:
    name: react_scuba_node-builder-turbo
  react_scuba_node-builder-git-hooks:
    name: react_scuba_node-builder-git-hooks
  react_scuba_node-builder-husky:
    name: react_scuba_node-builder-husky
  react_scuba_react_node_modules:
    name: react_scuba_react_node_modules
  react_scuba_react-vite-cache:
    name: react_scuba_react-vite-cache
  react_scuba_react-npm-cache:
    name: react_scuba_react-npm-cache

# Custom network with static IPs
networks:
  mcp-cluster:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
