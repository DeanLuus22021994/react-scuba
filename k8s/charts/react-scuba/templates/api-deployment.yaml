{{- if .Values.api.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "react-scuba.fullname" . }}-api
  labels:
    {{- include "react-scuba.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
spec:
  {{- if not .Values.api.autoscaling.enabled }}
  replicas: {{ .Values.api.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "react-scuba.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-api.yaml") . | sha256sum }}
        {{- if .Values.serviceMesh.linkerd.enabled }}
        linkerd.io/inject: "enabled"
        {{- end }}
        {{- if .Values.monitoring.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        {{- end }}
      labels:
        {{- include "react-scuba.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.security.podSecurityContext | nindent 8 }}
      containers:
        - name: api
          image: {{ include "react-scuba.apiImage" . }}
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: TENANT_ID
              value: {{ .Values.global.tenantId | quote }}
            - name: TENANT_NAME
              value: {{ .Values.global.tenantName | quote }}
            - name: NODE_ENV
              value: {{ .Values.api.env.nodeEnv | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.api.env.logLevel | quote }}
            - name: DB_HOST
              value: {{ .Values.database.host | quote }}
            - name: DB_PORT
              value: {{ .Values.database.port | quote }}
            - name: DB_NAME
              value: {{ .Values.database.name | quote }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: password
            - name: REDIS_HOST
              value: {{ .Values.cache.redis.host | quote }}
            - name: REDIS_PORT
              value: {{ .Values.cache.redis.port | quote }}
            {{- if .Values.monitoring.jaeger.enabled }}
            - name: JAEGER_ENDPOINT
              value: {{ .Values.monitoring.jaeger.endpoint | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.security.containerSecurityContext | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
{{- end }}
