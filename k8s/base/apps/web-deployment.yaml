# ==============================================================================
# React Web App Deployment for React Scuba Platform
# ==============================================================================
# Vite-built React 19 SPA with Nginx serving

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-web
  namespace: apps
  labels:
    app: node-web
    tier: app
    component: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: node-web
      tier: app
  template:
    metadata:
      labels:
        app: node-web
        tier: app
        component: frontend
      annotations:
        linkerd.io/inject: "enabled"
        config.linkerd.io/proxy-cpu-request: "50m"
        config.linkerd.io/proxy-memory-request: "64Mi"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - node-web
                topologyKey: kubernetes.io/hostname

      containers:
        - name: web
          image: localhost:5001/react-scuba-web:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: http
              protocol: TCP

          env:
            - name: API_URL
              value: "http://node-api.apps.svc.cluster.local:3000"
            - name: TENANT_ID
              valueFrom:
                configMapKeyRef:
                  name: web-config
                  key: tenant-id

          envFrom:
            - configMapRef:
                name: web-config

          volumeMounts:
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run

          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"

          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3

          securityContext:
            runAsNonRoot: true
            runAsUser: 101  # nginx user
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE

      volumes:
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: node-web
  namespace: apps
  labels:
    app: node-web
    tier: app
spec:
  type: ClusterIP
  selector:
    app: node-web
    tier: app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: node-web-hpa
  namespace: apps
  labels:
    app: node-web
    tier: app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: node-web
  minReplicas: 3
  maxReplicas: 15
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 30
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
