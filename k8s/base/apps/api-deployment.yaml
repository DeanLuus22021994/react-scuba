# ==============================================================================
# Node.js API Deployment for React Scuba Platform
# ==============================================================================
# Express.js REST API with tenant isolation and Linkerd service mesh

apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-api
  namespace: apps
  labels:
    app: node-api
    tier: app
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: node-api
      tier: app
  template:
    metadata:
      labels:
        app: node-api
        tier: app
        component: backend
      annotations:
        linkerd.io/inject: "enabled"
        config.linkerd.io/proxy-cpu-request: "100m"
        config.linkerd.io/proxy-memory-request: "128Mi"
    spec:
      serviceAccountName: app-sa

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - node-api
                topologyKey: kubernetes.io/hostname

      containers:
        - name: api
          image: localhost:5001/react-scuba-api:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP

          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3000"
            - name: HOST
              value: "0.0.0.0"
            - name: API_LOG_LEVEL
              value: "info"

            # Database configuration (shared cluster, tenant-specific DB)
            - name: DB_HOST
              value: "react-scuba-postgres.databases.svc.cluster.local"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: db-name
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: password

            # Cache configuration
            - name: REDIS_HOST
              value: "redis.cache.svc.cluster.local"
            - name: REDIS_PORT
              value: "6379"
            - name: CACHE_HOST
              value: "memcached.cache.svc.cluster.local"
            - name: CACHE_PORT
              value: "11211"

            # Tenant configuration
            - name: TENANT_ID
              valueFrom:
                configMapKeyRef:
                  name: api-config
                  key: tenant-id

          envFrom:
            - configMapRef:
                name: api-config

          volumeMounts:
            - name: api-logs
              mountPath: /var/log/api

          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "1000m"
              memory: "512Mi"

          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /ready
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

      volumes:
        - name: api-logs
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: node-api
  namespace: apps
  labels:
    app: node-api
    tier: app
spec:
  type: ClusterIP
  selector:
    app: node-api
    tier: app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      name: http

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: node-api-hpa
  namespace: apps
  labels:
    app: node-api
    tier: app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: node-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-sa
  namespace: apps
