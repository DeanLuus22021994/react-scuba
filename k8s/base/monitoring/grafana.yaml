# ==============================================================================
# Grafana Deployment with Pre-configured Dashboards
# ==============================================================================
# Multi-tenant dashboards with automatic Prometheus integration

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        linkerd.io/inject: enabled
    spec:
      securityContext:
        fsGroup: 472
        runAsNonRoot: true
        runAsUser: 472

      containers:
        - name: grafana
          image: grafana/grafana:10.2.2
          ports:
            - containerPort: 3000
              name: http

          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-credentials
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-credentials
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              value: grafana-piechart-panel,grafana-clock-panel
            - name: GF_SERVER_ROOT_URL
              value: http://localhost:3000
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"

          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 10

          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 5

          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi

          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards

      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-data
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      name: http

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus.monitoring.svc.cluster.local:9090
        isDefault: true
        editable: false
      - name: Jaeger
        type: jaeger
        access: proxy
        url: http://jaeger-query.monitoring.svc.cluster.local:16686
        editable: false

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  react-scuba-overview.json: |
    {
      "dashboard": {
        "title": "React Scuba Platform Overview",
        "panels": [
          {
            "title": "Request Rate by Tenant",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"node-api\"}[5m])) by (tenant)"
              }
            ]
          },
          {
            "title": "Error Rate by Tenant",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"node-api\",status=~\"5..\"}[5m])) by (tenant)"
              }
            ]
          },
          {
            "title": "Database Connection Pool",
            "targets": [
              {
                "expr": "sum(pg_stat_database_numbackends) by (datname)"
              }
            ]
          }
        ]
      }
    }
