/**
 * Concise Markdown report generator
 */

export class MarkdownGenerator {
  constructor(statistics, runTime) {
    this.statistics = statistics;
    this.runTime = runTime;
  }

  /**
   * Generate concise summary-only markdown
   */
  generate() {
    let md = '# Test Results - Quick Summary\n\n';
    md += `**Last Run:** ${new Date(this.runTime).toLocaleString()}\n\n`;

    // Summary badges
    const passRate =
      this.statistics.totalTests > 0
        ? ((this.statistics.passedTests / this.statistics.totalTests) * 100).toFixed(1)
        : '0.0';

    md += '## Status\n\n';
    md += '```text\n';
    md += `✅ ${this.statistics.passedTests}/${this.statistics.totalTests} tests passing (${passRate}%)\n`;
    md += `📁 ${this.statistics.passedFiles}/${this.statistics.totalFiles} test files passing\n`;
    if (this.statistics.failedTests > 0) {
      md += `❌ ${this.statistics.failedTests} tests failing\n`;
    }
    md += '```\n\n';

    md += '## Quick Stats\n\n';
    md += '| Metric | Value |\n';
    md += '|--------|-------|\n';
    md += `| Test Files | ${this.statistics.totalFiles} |\n`;
    md += `| Total Tests | ${this.statistics.totalTests} |\n`;
    md += `| Pass Rate | ${passRate}% |\n\n`;

    if (this.statistics.failedFiles > 0) {
      md += '## ⚠️ Failed Files\n\n';
      const failedFiles = Array.from(this.statistics.files.entries())
        .filter(([, data]) => data.failed.length > 0)
        .sort((a, b) => b[1].failed.length - a[1].failed.length);

      for (const [fileName, data] of failedFiles) {
        md += `- **${fileName}** (${data.failed.length} failures)\n`;
      }
      md += '\n';
    }

    md += '---\n\n';
    md += '📊 **[View Full Interactive Report](./index.html)** for detailed analysis, charts, and performance metrics.\n\n';
    md += `*Generated by Vitest Reporter on ${new Date(this.runTime).toLocaleString()}*\n`;

    return md;
  }
}
