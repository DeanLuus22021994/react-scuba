#!/usr/bin/env node
/**
 * .vscode/scripts/install-hooks.js
 * Automated Git hook installation and management for React Scuba documentation
 * 
 * Usage:
 *   node .vscode/scripts/install-hooks.js [--force] [--uninstall]
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const HOOKS_DIR = '.git/hooks';
const SCRIPTS_DIR = '.vscode/scripts';
const PRE_COMMIT_SCRIPT = 'pre-commit-docs.sh';
const HOOK_NAME = 'pre-commit';

// Colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function findProjectRoot() {
  let currentDir = process.cwd();
  while (currentDir !== path.dirname(currentDir)) {
    if (fs.existsSync(path.join(currentDir, '.git'))) {
      return currentDir;
    }
    currentDir = path.dirname(currentDir);
  }
  throw new Error('Git repository not found. This script must be run from within a Git repository.');
}

function checkGitRepository() {
  try {
    execSync('git rev-parse --git-dir', { stdio: 'ignore' });
    return true;
  } catch (error) {
    return false;
  }
}

function createHookContent(scriptPath) {
  return `#!/bin/bash
# Auto-generated Git pre-commit hook for React Scuba documentation validation
# Generated by: .vscode/scripts/install-hooks.js
# Documentation: See README.md for hook management instructions

# Execute the documentation validation script
bash "${scriptPath}"

# Exit with the same status as the validation script
exit $?
`;
}

function installHooks(force = false) {
  log('üîß Installing React Scuba documentation validation hooks...', 'blue');
  
  const projectRoot = findProjectRoot();
  const hooksDir = path.join(projectRoot, HOOKS_DIR);
  const scriptsDir = path.join(projectRoot, SCRIPTS_DIR);
  const hookFile = path.join(hooksDir, HOOK_NAME);
  const scriptFile = path.join(scriptsDir, PRE_COMMIT_SCRIPT);
  
  // Verify required directories exist
  if (!fs.existsSync(hooksDir)) {
    log('‚ùå Git hooks directory not found. Is this a valid Git repository?', 'red');
    process.exit(1);
  }
  
  if (!fs.existsSync(scriptFile)) {
    log(`‚ùå Documentation validation script not found: ${scriptFile}`, 'red');
    log('   Please ensure the React Scuba project structure is complete.', 'yellow');
    process.exit(1);
  }
  
  // Check if hook already exists
  if (fs.existsSync(hookFile) && !force) {
    log('‚ö†Ô∏è  Pre-commit hook already exists!', 'yellow');
    log('   Use --force to overwrite, or --uninstall to remove existing hooks.', 'yellow');
    process.exit(1);
  }
  
  // Make the validation script executable
  try {
    execSync(`chmod +x "${scriptFile}"`, { stdio: 'ignore' });
  } catch (error) {
    log('‚ö†Ô∏è  Could not make validation script executable (Windows?)', 'yellow');
  }
  
  // Create the hook file
  const hookContent = createHookContent(scriptFile);
  fs.writeFileSync(hookFile, hookContent, { mode: 0o755 });
  
  // Make hook executable
  try {
    execSync(`chmod +x "${hookFile}"`, { stdio: 'ignore' });
  } catch (error) {
    log('‚ö†Ô∏è  Could not make hook executable (Windows?)', 'yellow');
  }
  
  log('‚úÖ Documentation validation hooks installed successfully!', 'green');
  log('', 'reset');
  log('üìã What happens now:', 'blue');
  log('   ‚Ä¢ Documentation changes will be validated before each commit', 'reset');
  log('   ‚Ä¢ TOC structure and cross-references will be checked', 'reset');
  log('   ‚Ä¢ Test suite will run to ensure documentation integrity', 'reset');
  log('   ‚Ä¢ Commits will be blocked if validation fails', 'reset');
  log('', 'reset');
  log('üîß Management commands:', 'blue');
  log('   ‚Ä¢ Test validation: npm run validate:docs', 'reset');
  log('   ‚Ä¢ Bypass hook once: git commit --no-verify', 'reset');
  log('   ‚Ä¢ Uninstall hooks: node .vscode/scripts/install-hooks.js --uninstall', 'reset');
}

function uninstallHooks() {
  log('üóëÔ∏è  Uninstalling React Scuba documentation validation hooks...', 'yellow');
  
  const projectRoot = findProjectRoot();
  const hookFile = path.join(projectRoot, HOOKS_DIR, HOOK_NAME);
  
  if (!fs.existsSync(hookFile)) {
    log('‚ÑπÔ∏è  No pre-commit hook found to uninstall.', 'blue');
    return;
  }
  
  // Check if it's our hook
  const hookContent = fs.readFileSync(hookFile, 'utf8');
  if (!hookContent.includes('React Scuba documentation validation')) {
    log('‚ö†Ô∏è  Pre-commit hook exists but was not created by React Scuba.', 'yellow');
    log('   Manual removal required to avoid overwriting custom hooks.', 'yellow');
    process.exit(1);
  }
  
  fs.unlinkSync(hookFile);
  log('‚úÖ Documentation validation hooks uninstalled successfully!', 'green');
  log('   You can reinstall them anytime with: node .vscode/scripts/install-hooks.js', 'blue');
}

function showUsage() {
  log('React Scuba Documentation Hooks Installer', 'blue');
  log('==========================================', 'blue');
  log('', 'reset');
  log('Usage: node .vscode/scripts/install-hooks.js [options]', 'reset');
  log('', 'reset');
  log('Options:', 'yellow');
  log('  --force      Overwrite existing pre-commit hooks', 'reset');
  log('  --uninstall  Remove React Scuba documentation hooks', 'reset');
  log('  --help       Show this usage information', 'reset');
  log('', 'reset');
  log('Examples:', 'yellow');
  log('  node .vscode/scripts/install-hooks.js              # Install hooks', 'reset');
  log('  node .vscode/scripts/install-hooks.js --force      # Force install', 'reset');
  log('  node .vscode/scripts/install-hooks.js --uninstall  # Uninstall', 'reset');
}

function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    showUsage();
    return;
  }
  
  if (!checkGitRepository()) {
    log('‚ùå This directory is not a Git repository!', 'red');
    log('   Documentation hooks can only be installed in Git repositories.', 'yellow');
    process.exit(1);
  }
  
  try {
    if (args.includes('--uninstall')) {
      uninstallHooks();
    } else {
      const force = args.includes('--force');
      installHooks(force);
    }
  } catch (error) {
    log(`‚ùå Error: ${error.message}`, 'red');
    process.exit(1);
  }
}

// Handle process termination gracefully
process.on('SIGINT', () => {
  log('', 'reset');
  log('‚ö†Ô∏è  Hook installation cancelled by user.', 'yellow');
  process.exit(1);
});

if (require.main === module) {
  main();
}

module.exports = {
  installHooks,
  uninstallHooks,
  checkGitRepository,
  findProjectRoot
};