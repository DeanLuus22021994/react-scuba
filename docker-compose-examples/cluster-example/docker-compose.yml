version: "3.8"

services:
  loadbalancer:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ../..:/workspaces:cached
      - node_modules:/workspaces/node_modules
      - react_scuba_python_venv:/workspaces/.venv
    working_dir: /workspaces
    ports:
      - "8080:80"
    depends_on:
      web1:
        condition: service_healthy
      web2:
        condition: service_healthy
      web3:
        condition: service_healthy
      node:
        condition: service_healthy
    networks:
      - cluster-network
    profiles:
      - dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  node:
    build:
      context: ../..
      dockerfile: docker-compose-examples/cluster-example/dockerfiles/node.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ../..:/app:cached
      - node_modules:/app/node_modules
      - node_cache:/root/.npm
      - node_yarn_cache:/usr/local/share/.cache/yarn
    working_dir: /app
    command: sh -c "npm install --legacy-peer-deps && npm start"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
        required: true
    networks:
      - cluster-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://127.0.0.1:3000/ || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s

  python:
    build:
      context: ../..
      dockerfile: docker-compose-examples/mcp/python_utils/dockerfiles/python.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ../mcp/python_utils:/app:cached
      - react_scuba_python_venv:/app/.venv
      - python_cache:/root/.cache/pip
      - python_pytest_cache:/tmp/.cache/pytest
      - python_mypy_cache:/tmp/.cache/mypy
      - python_ruff_cache:/tmp/.cache/ruff
    working_dir: /app
    command: sh -c "pip install -e . && python -m react_scuba_utils.api"
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app:/app
      - CLUSTER_MODE=true
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cluster-network
    healthcheck:
      test:
        ["CMD", "python", "-c", "import sys; print('Python OK'); sys.exit(0)"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  web1:
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
      - nginx_cache:/var/cache/nginx
    command: nginx -g 'daemon off;'
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  web2:
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
      - nginx_cache:/var/cache/nginx
    command: nginx -g 'daemon off;'
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  web3:
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    volumes:
      - ./web-content:/usr/share/nginx/html:ro
      - nginx_cache:/var/cache/nginx
    command: nginx -g 'daemon off;'
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  db:
    build:
      context: .
      dockerfile: dockerfiles/postgres.Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - db_data:/var/lib/postgresql/data
      - db_logs:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  db_data:
    driver: local
  db_logs:
    driver: local
  node_modules:
    driver: local
  node_cache:
    driver: local
  node_yarn_cache:
    driver: local
  react_scuba_python_venv:
    driver: local
  python_cache:
    driver: local
  python_pytest_cache:
    driver: local
  python_mypy_cache:
    driver: local
  python_ruff_cache:
    driver: local
  nginx_cache:
    driver: local

networks:
  cluster-network:
    driver: bridge
