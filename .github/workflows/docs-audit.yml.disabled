name: Weekly Documentation Audit

on:
  schedule:
    # Run every Monday at 9:00 AM UTC (weekly audit)
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      send_report:
        description: 'Send detailed report to GitHub Issues'
        required: false
        default: true
        type: boolean

jobs:
  audit-documentation:
    name: Comprehensive Documentation Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
          
      - name: Install Dependencies
        run: |
          cd server
          npm ci --legacy-peer-deps
          
      - name: Run Comprehensive Validation
        id: validation
        run: |
          cd server
          echo "::group::Full Documentation Validation"
          
          # Run all validation scripts
          echo "Running TOC validation..."
          npm run validate:toc > ../audit-results.txt 2>&1 || echo "TOC_FAILED" >> ../audit-results.txt
          
          echo "Running documentation tests..."
          npm run test:docs -- --reporter=verbose >> ../audit-results.txt 2>&1 || echo "TESTS_FAILED" >> ../audit-results.txt
          
          echo "Running full validation suite..."
          npm run validate:all >> ../audit-results.txt 2>&1 || echo "VALIDATION_FAILED" >> ../audit-results.txt
          
          echo "::endgroup::"
          
      - name: Generate Coverage Report
        run: |
          cd server
          echo "::group::Coverage Analysis"
          npm run test:docs -- --coverage --reporter=json > coverage-summary.json 2>/dev/null || echo "Coverage generation failed" > coverage-summary.json
          echo "::endgroup::"
          
      - name: Analyze Documentation Health
        id: analysis
        run: |
          echo "::group::Documentation Health Analysis"
          
          # Count files and analyze structure
          TOTAL_FILES=$(find docs/.copilot -name "*.md" | wc -l)
          DOMAIN_COUNT=$(ls -1d docs/.copilot/*/ 2>/dev/null | wc -l)
          TEST_FILES=$(find docs/.copilot/__tests__ -name "*.test.ts" | wc -l)
          
          echo "Documentation Metrics:" > health-report.txt
          echo "- Total documentation files: $TOTAL_FILES" >> health-report.txt
          echo "- Domain directories: $DOMAIN_COUNT" >> health-report.txt
          echo "- Test files: $TEST_FILES" >> health-report.txt
          echo "" >> health-report.txt
          
          # Check for potential issues
          echo "Potential Issues:" >> health-report.txt
          
          # Check for orphaned files
          ORPHANED=$(find docs/.copilot -name "*.md" -not -path "*/.*" -exec basename {} \; | sort > /tmp/all-files.txt; grep -h "name:" docs/.copilot/toc.yml | sed 's/.*name: //' | sort > /tmp/toc-files.txt; comm -23 /tmp/all-files.txt /tmp/toc-files.txt | wc -l)
          if [ "$ORPHANED" -gt 0 ]; then
            echo "- $ORPHANED potentially orphaned files detected" >> health-report.txt
          else
            echo "- No orphaned files detected ‚úÖ" >> health-report.txt
          fi
          
          # Check for missing descriptions
          MISSING_DESC=$(grep -L "description:" docs/.copilot/*/*.md 2>/dev/null | wc -l)
          if [ "$MISSING_DESC" -gt 0 ]; then
            echo "- $MISSING_DESC files missing descriptions" >> health-report.txt
          else
            echo "- All files have descriptions ‚úÖ" >> health-report.txt
          fi
          
          echo "::endgroup::"
          
          # Set outputs for issue creation
          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "domain_count=$DOMAIN_COUNT" >> $GITHUB_OUTPUT
          echo "orphaned_count=$ORPHANED" >> $GITHUB_OUTPUT
          
      - name: Upload Audit Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-audit-${{ github.run_number }}
          path: |
            audit-results.txt
            health-report.txt
            server/coverage/
          retention-days: 30
          
      - name: Create or Update Audit Issue
        if: github.event_name == 'schedule' || github.event.inputs.send_report == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read audit results
            let auditResults = '';
            let healthReport = '';
            
            try {
              auditResults = fs.readFileSync('audit-results.txt', 'utf8');
              healthReport = fs.readFileSync('health-report.txt', 'utf8');
            } catch (error) {
              auditResults = 'Error reading audit results';
              healthReport = 'Error reading health report';
            }
            
            const totalFiles = '${{ steps.analysis.outputs.total_files }}';
            const domainCount = '${{ steps.analysis.outputs.domain_count }}';
            const orphanedCount = '${{ steps.analysis.outputs.orphaned_count }}';
            
            const hasIssues = orphanedCount > 0 || auditResults.includes('FAILED');
            const status = hasIssues ? '‚ö†Ô∏è ISSUES DETECTED' : '‚úÖ HEALTHY';
            
            const issueTitle = `üìä Weekly Documentation Audit - ${new Date().toISOString().split('T')[0]}`;
            
            const issueBody = `
            # Weekly Documentation Audit Report
            
            **Status:** ${status}
            **Run Date:** ${new Date().toISOString()}
            **Workflow:** [View Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            ## üìà Documentation Metrics
            
            - **Total Files:** ${totalFiles}
            - **Domain Directories:** ${domainCount}
            - **Orphaned Files:** ${orphanedCount}
            
            ## üîç Health Report
            
            \`\`\`
            ${healthReport}
            \`\`\`
            
            ## üß™ Validation Results
            
            <details>
            <summary>Click to view detailed validation output</summary>
            
            \`\`\`
            ${auditResults}
            \`\`\`
            
            </details>
            
            ## üìã Recommended Actions
            
            ${hasIssues ? `
            ### üö® Issues Require Attention
            
            - ${orphanedCount > 0 ? `Review ${orphanedCount} orphaned files and update TOC` : ''}
            - ${auditResults.includes('TOC_FAILED') ? 'Fix TOC validation errors' : ''}
            - ${auditResults.includes('TESTS_FAILED') ? 'Resolve failing documentation tests' : ''}
            - ${auditResults.includes('VALIDATION_FAILED') ? 'Address general validation failures' : ''}
            
            **Priority:** High - Documentation integrity compromised
            ` : `
            ### ‚úÖ Documentation is Healthy
            
            - All validation checks passed
            - No orphaned files detected
            - Documentation structure is consistent
            - All tests passing
            
            **Status:** Good - No action required
            `}
            
            ## üîó Quick Links
            
            - [Documentation TOC](./docs/.copilot/toc.yml)
            - [Validation Scripts](./server/scripts/)
            - [Test Suite](./docs/.copilot/__tests__/)
            - [GitHub Actions Workflow](./github/workflows/docs-audit.yml)
            
            ---
            
            *This report was automatically generated by the weekly documentation audit workflow.*
            *Next audit: ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}*
            `;
            
            // Look for existing audit issue from this week
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['documentation', 'audit'],
              state: 'open'
            });
            
            const thisWeek = new Date().toISOString().split('T')[0];
            const existingIssue = issues.find(issue => 
              issue.title.includes('Weekly Documentation Audit') && 
              issue.title.includes(thisWeek)
            );
            
            if (existingIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: issueTitle,
                body: issueBody,
                labels: ['documentation', 'audit', hasIssues ? 'needs-attention' : 'healthy']
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['documentation', 'audit', hasIssues ? 'needs-attention' : 'healthy']
              });
            }