name: Documentation Validation

on:
  pull_request:
    paths:
      - 'docs/.copilot/**'
      - 'server/scripts/validate-toc.js'
      - '.github/workflows/docs-validation.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'docs/.copilot/**'
      - 'server/scripts/validate-toc.js'

jobs:
  validate-docs:
    name: Validate Documentation Structure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
          
      - name: Install Dependencies
        run: |
          cd server
          npm ci --legacy-peer-deps
          
      - name: Run TOC Validation
        id: toc-validation
        run: |
          cd server
          echo "::group::TOC Validation"
          npm run validate:toc
          echo "::endgroup::"
          
      - name: Run Documentation Tests
        id: docs-tests
        run: |
          cd server
          echo "::group::Documentation Tests"
          npm run test:docs -- --reporter=verbose
          echo "::endgroup::"
          
      - name: Generate Test Coverage
        if: success() || failure()
        run: |
          cd server
          echo "::group::Test Coverage"
          npm run test:docs -- --coverage --reporter=verbose
          echo "::endgroup::"
          
      - name: Upload Coverage Reports
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: docs-coverage-report
          path: server/coverage/
          retention-days: 7
          
      - name: Comment on PR
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if validation passed
            const tocValidation = '${{ steps.toc-validation.outcome }}' === 'success';
            const docsTests = '${{ steps.docs-tests.outcome }}' === 'success';
            
            const overallStatus = tocValidation && docsTests ? '✅ PASSED' : '❌ FAILED';
            const tocStatus = tocValidation ? '✅' : '❌';
            const testStatus = docsTests ? '✅' : '❌';
            
            const comment = `
            ## Documentation Validation ${overallStatus}
            
            | Check | Status | Description |
            |-------|--------|-------------|
            | TOC Validation | ${tocStatus} | File existence and cross-reference validation |
            | Documentation Tests | ${testStatus} | Link checking, orphan detection, schema validation |
            
            ${tocValidation && docsTests ? 
              '🎉 All documentation validation checks passed! Your changes maintain documentation integrity.' :
              '⚠️ Some validation checks failed. Please review the logs above and fix any issues.'
            }
            
            ### Next Steps
            ${tocValidation && docsTests ? 
              '- Your documentation changes are ready for review\n- Consider running `npm run validate:all` locally before future commits' :
              '- Review the failed checks in the Actions tab\n- Run `npm run validate:docs` locally to debug issues\n- Update documentation structure as needed'
            }
            
            ---
            *This comment was automatically generated by the documentation validation workflow.*
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Documentation Validation') && 
              comment.user.type === 'Bot'
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }