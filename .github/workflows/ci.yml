name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # ============================================================================
  # CODE QUALITY CHECKS
  # ============================================================================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run Prettier check
        run: npm run format:check
      
      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            eslint-report.json
            .prettier-report.txt
          retention-days: 7

  # ============================================================================
  # TESTING
  # ============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: react-scuba-coverage
          fail_ci_if_error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.json
          retention-days: 7
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # BUILD & BUNDLE SIZE CHECK
  # ============================================================================
  build:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Analyze bundle size
        run: |
          echo "# Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          du -sh dist/* | sort -hr >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Total Size" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          du -sh dist >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      
      - name: Check bundle size limits
        run: |
          # Check if dist size exceeds 2MB (warning threshold)
          DIST_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=$((2 * 1024 * 1024))
          
          if [ $DIST_SIZE -gt $MAX_SIZE ]; then
            echo "‚ö†Ô∏è Warning: Bundle size exceeds 2MB threshold"
            echo "Current size: $(du -sh dist | cut -f1)"
            echo "::warning::Bundle size exceeds recommended 2MB limit"
          else
            echo "‚úÖ Bundle size within limits: $(du -sh dist | cut -f1)"
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

  # ============================================================================
  # LIGHTHOUSE PERFORMANCE AUDIT
  # ============================================================================
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install serve
        run: npm install -g serve
      
      - name: Start preview server
        run: |
          serve -s dist -l 8080 &
          sleep 5
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:8080
            http://localhost:8080/courses
            http://localhost:8080/dive-sites
            http://localhost:8080/gallery
            http://localhost:8080/about
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
      
      - name: Check Lighthouse scores
        run: |
          echo "# Lighthouse Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä Performance baseline: >90" >> $GITHUB_STEP_SUMMARY
          echo "‚ôø Accessibility baseline: >90" >> $GITHUB_STEP_SUMMARY
          echo "üéØ Best Practices baseline: >90" >> $GITHUB_STEP_SUMMARY
          echo "üîç SEO baseline: >90" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in artifacts" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # DOCKER BUILD TEST
  # ============================================================================
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile.dev
          push: false
          tags: react-scuba:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker container
        run: |
          docker run --rm -d --name react-test -p 5173:5173 react-scuba:test
          sleep 10
          
          # Test if container is running
          if docker ps | grep -q react-test; then
            echo "‚úÖ Container is running"
          else
            echo "‚ùå Container failed to start"
            exit 1
          fi
          
          # Cleanup
          docker stop react-test

  # ============================================================================
  # SECURITY AUDIT
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
  # ============================================================================
  # ALL CHECKS PASSED
  # ============================================================================
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, test, build, lighthouse, docker, security]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.lighthouse.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" ]]; then
            echo "‚úÖ All required checks passed!"
            exit 0
          else
            echo "‚ùå Some checks failed"
            exit 1
          fi
