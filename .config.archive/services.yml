# Infrastructure Services Configuration
# Consolidated configuration for all non-MCP infrastructure services
# This file defines k8s-plugin, mariadb-mcp, runner, and runner commands

version: '1.0'

# ==============================================================================
# TIER 1: Kubernetes Tools & Plugins
# ==============================================================================
services:
  k8s-plugin:
    service:
      name: k8s-plugin
      type: tools
      description: Kubernetes management tools and CLI utilities
    
    network:
      ip: 172.20.0.50
    
    tools:
      kubectl:
        version: v1.31.2
        description: Kubernetes command-line tool
      helm:
        version: v3.16.2
        description: Kubernetes package manager
      kompose:
        version: v1.34.0
        description: Docker Compose to Kubernetes converter
      k9s:
        version: v0.32.5
        description: Terminal UI for Kubernetes
    
    volumes:
      - k8s-config:/root/.kube
      - k8s-cache:/cache/k8s
      - /var/run/docker.sock:/var/run/docker.sock
    
    resources:
      cpu: 1
      memory: 1g

  # ===========================================================================
  # TIER 2: Database MCP Server
  # ===========================================================================
  mariadb-mcp:
    service:
      name: mariadb-mcp
      type: mcp-server
      description: MySQL-compatible database MCP server
    
    network:
      ip: 172.20.0.32
    
    resources:
      cpu: 1
      memory: 2g
      max_size: 500m
    
    volumes:
      - mariadb-node-cache:/cache/node
      - mariadb-cache:/cache/mariadb
    
    dependencies:
      - mariadb
    
    environment:
      MARIADB_CONNECTION: "mysql://root:@mariadb:3306"

  # ===========================================================================
  # TIER 3: GitHub Actions Runner
  # ===========================================================================
  github-runner:
    service:
      name: github-runner
      type: ci-cd
      description: Self-hosted GitHub Actions runner with Docker-in-Docker
    
    network:
      ip: 172.20.0.55
    
    runner:
      name: "\"
      labels:
        - docker
        - linux
        - x64
        - self-hosted
        - mcp-cluster
        - buildkit
      
      mode:
        ephemeral: true
        replace_existing: true
      
      work_directory: /work
      cleanup_work_directory: true
    
    resources:
      cpu_limit: 4.0
      memory_limit: 8G
      disk_space_threshold: 10G
    
    volumes:
      - runner-work:/work
      - runner-cache:/.cache
      - /var/run/docker.sock:/var/run/docker.sock
    
    docker:
      enabled: true
      socket: /var/run/docker.sock
      privileged: true
      
      buildkit:
        enabled: true
        host: tcp://buildkit:1234
        inline_cache: true
        progress: plain
      
      registries:
        - name: Docker Hub
          url: https://registry-1.docker.io
          username: "\"
          password_env: DOCKERHUB_TOKEN
        
        - name: GitHub Container Registry
          url: https://ghcr.io
          username: "\"
          password_env: GITHUB_TOKEN
      
      cleanup:
        enabled: true
        schedule: "0 2 * * *"
        prune_images: true
        prune_containers: true
        prune_volumes: false
        keep_images:
          - "node:*"
          - "postgres:*"
          - "alpine:*"
    
    github:
      url: https://github.com
      repo_owner: "\"
      repo_name: "\"
      token_env: GITHUB_TOKEN
      
      api:
        timeout: 30
        retry_attempts: 3
        rate_limit_threshold: 100
    
    logging:
      level: info
      format: json
      output:
        - type: console
          level: info
        - type: file
          path: /work/_diag/runner.log
          level: debug
          max_size: 100M
          max_backups: 5
      
      metrics:
        enabled: true
        port: 9090
        path: /metrics
        labels:
          environment: development
          cluster: mcp-cluster
    
    security:
      allowed_actions:
        - "actions/*"
        - "docker/*"
        - "github/*"
      
      blocked_actions:
        - "*/dangerous-action@*"
      
      mask_secrets: true
      
      network:
        allow_external: true
        allowed_hosts:
          - github.com
          - api.github.com
          - ghcr.io
          - registry-1.docker.io
        blocked_hosts: []
    
    performance:
      max_parallel_jobs: 2
      
      cache:
        enabled: true
        directory: /.cache
        max_size: 5G
        strategies:
          - buildkit
          - npm
          - docker-layer
      
      network:
        dns_servers:
          - 8.8.8.8
          - 1.1.1.1
        mtu: 1500
      
      startup:
        pre_pull_images:
          - node:22-alpine
          - postgres:16-alpine
          - alpine:3.21
        warm_up_docker: true
    
    health:
      liveness:
        command: pgrep Runner.Listener
        interval: 30
        timeout: 10
        retries: 3
        start_period: 60
      
      readiness:
        command: "curl -f http://localhost:9090/metrics || exit 1"
        interval: 10
        timeout: 5
        retries: 3
    
    maintenance:
      auto_update:
        enabled: true
        schedule: "0 3 * * 0"
        strategy: rolling
      
      rotation:
        enabled: false
        max_job_count: 100
        max_uptime: 168h
    
    notifications:
      on_failure:
        - type: webhook
          url: "\"
          payload:
            text: "Runner \ job failed"
      
      on_startup:
        - type: log
          message: "Runner \ started successfully"

# ==============================================================================
# RUNNER COMMANDS CONFIGURATION
# ==============================================================================
commands:
  docker:
    build:
      description: Build Docker image with BuildKit
      command: "docker build --build-arg BUILDKIT_INLINE_CACHE=1 -t IMAGE:TAG ."
      environment:
        DOCKER_BUILDKIT: "1"
        BUILDKIT_PROGRESS: plain
    
    compose_up:
      description: Start Docker Compose stack with build
      command: docker-compose up --build -d
      working_directory: ".devcontainer"
    
    prune:
      description: Clean up unused Docker resources
      command: docker system prune -af --volumes
      requires_approval: true
  
  test:
    unit:
      description: Run unit tests with coverage
      command: npm run test:coverage
      artifacts:
        - coverage/
    
    integration:
      description: Run integration tests
      command: docker-compose -f docker-compose.test.yml up --abort-on-container-exit
      cleanup: docker-compose -f docker-compose.test.yml down -v
    
    e2e:
      description: Run end-to-end tests
      command: npm run test:e2e
      requires_services:
        - postgres-db
        - mariadb
  
  lint:
    check:
      description: Run all linters
      command: npm run lint && npm run format:check
      fail_fast: true
    
    fix:
      description: Auto-fix linting issues
      command: npm run lint:fix && npm run format
      commit_changes: true
  
  build:
    production:
      description: Build production bundle
      command: npm run build
      environment:
        NODE_ENV: production
      artifacts:
        - dist/
    
    analyze:
      description: Analyze bundle size
      command: npm run build -- --analyze
      artifacts:
        - dist/stats.html
  
  database:
    migrate:
      description: Run database migrations
      command: npm run migrate:up
      requires_services:
        - postgres-db
    
    seed:
      description: Seed database with test data
      command: npm run db:seed
      environment:
        NODE_ENV: development
    
    backup:
      description: Backup PostgreSQL database
      command: "docker exec postgres-db pg_dump -U postgres postgres > backup.sql"
      artifacts:
        - backup.sql

# ==============================================================================
# COMMAND SETTINGS
# ==============================================================================
command_settings:
  timeout: 3600
  log_level: info
  
  retry:
    max_attempts: 3
    backoff: exponential
  
  environment_passthrough:
    - GITHUB_TOKEN
    - NODE_ENV
    - CI
    - DOCKER_BUILDKIT
  
  artifacts:
    retention_days: 7
    compression: true
    exclude:
      - node_modules/
      - .git/
      - "*.log"
  
  hooks:
    pre_command:
      - name: Check disk space
        command: df -h
      - name: Docker version
        command: docker --version
    
    post_command:
      - name: Cleanup temp files
        command: rm -rf /tmp/runner-*
      - name: Report metrics
        command: "echo 'Duration: completed'"
    
    on_failure:
      - name: Collect logs
        command: docker-compose logs > failure-logs.txt
      - name: System diagnostics
        command: docker ps -a && df -h && free -h

# ==============================================================================
# VOLUME DEFINITIONS
# ==============================================================================
volumes:
  k8s-config:
    name: k8s-config
  k8s-cache:
    name: k8s-cache
  mariadb-node-cache:
    name: mariadb-node-cache
  mariadb-cache:
    name: mariadb-cache
  runner-work:
    name: runner-work
  runner-cache:
    name: runner-cache

# ==============================================================================
# METADATA
# ==============================================================================
metadata:
  description: Infrastructure Services Configuration
  maintainer: Dean Luus
  created: 2025-10-27
  last_updated: 2025-10-27
  version: 1.0.0
  services_count: 3
