# ==============================================================================
# docker-compose.app.yml - Application Services
# ==============================================================================
# Purpose: API server, web dev server, build tools
# Composition: node-api, node-web, node-tools
# Network: mcp-cluster (shared with all other services)
# Dependencies: base services (postgres, memcached, etc.)
# Testing: docker-compose -f docker-compose.app.yml up
# ==============================================================================

name: react-scuba-app

services:
  # ==== TIER 7.5: API Server ====
  node-api:
    build:
      context: .
      dockerfile: .devcontainer/infrastructure/services/api/dockerfile
    image: react-scuba-api:latest
    container_name: node-api
    hostname: node-api
    networks:
      react-scuba_mcp-cluster:
        ipv4_address: 172.28.0.64
    ports:
      - "8003:3000"
    env_file:
      - devcontainer.env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - API_LOG_LEVEL=info
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DOCKER_POSTGRES_PASSWORD:-password}
      - DB_NAME=postgres
      - CACHE_HOST=memcached
      - CACHE_PORT=11211
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - react_scuba_api-logs:/var/log/api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      postgres-db:
        condition: service_healthy
      mariadb:
        condition: service_healthy
      memcached:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    stdin_open: true
    tty: false
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==== TIER 7: Web Dev Server ====
  node-web:
    build:
      context: .
      dockerfile: .devcontainer/infrastructure/services/web/dockerfile
    image: react-scuba-web:latest
    container_name: node-web
    hostname: node-web
    networks:
      react-scuba_mcp-cluster:
        ipv4_address: 172.28.0.65
    ports:
      - "5173:5173"
      - "5174:5174"
    env_file:
      - devcontainer.env
    environment:
      - NODE_ENV=development
      - PORT=5173
      - VITE_HMR_HOST=localhost
      - VITE_HMR_PORT=5173
    volumes:
      - ./server/apps/web/src:/app/apps/web/src
      - ./server/packages:/app/packages
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1024M
        reservations:
          cpus: "1.0"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==== TIER 7: Build Tools ====
  node-tools:
    build:
      context: .
      dockerfile: .devcontainer/infrastructure/services/tools/dockerfile
    image: react-scuba-tools:latest
    container_name: node-tools
    hostname: node-tools
    networks:
      react-scuba_mcp-cluster:
        ipv4_address: 172.28.0.66
    env_file:
      - devcontainer.env
    environment:
      - NODE_ENV=development
    volumes:
      - ./server:/app/server
      - ./docker-compose-examples:/app/docker-compose-examples
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2048M
        reservations:
          cpus: "1.0"
          memory: 1024M
    stdin_open: true
    tty: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  react-scuba_mcp-cluster:
    name: mcp-cluster
    external: true

volumes:
  react_scuba_api-logs:
    name: react_scuba_api-logs
