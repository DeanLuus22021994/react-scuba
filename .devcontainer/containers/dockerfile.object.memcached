# ==============================================================================
# Memcached Object Cache - High-Performance In-Memory Cache
# ==============================================================================
# Purpose: Distributed in-memory key-value cache for session and object storage
# Architecture: Standalone memcached with stats monitoring
# Base: Official Memcached Alpine
# Features: LRU eviction, stats endpoint, multi-threaded
# ==============================================================================

FROM memcached:alpine

# Metadata labels
LABEL org.opencontainers.image.title="Memcached Object Cache" \
  org.opencontainers.image.description="High-performance in-memory object cache" \
  org.opencontainers.image.vendor="React Scuba" \
  maintainer="Dean Luus" \
  purpose="object-cache" \
  cache.type="memory" \
  protocol="memcache"

# Install additional utilities
USER root
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
  apk add --no-cache \
  curl \
  jq \
  bash \
  netcat-openbsd \
  ca-certificates

# Create health and stats script
RUN cat > /usr/local/bin/memcached-health <<'HEALTH_EOF'
#!/bin/bash
set -euo pipefail

TIMESTAMP=$(date +"%y-%m-%d-%H-%M-%S")

# Check memcached availability
if echo "stats" | nc localhost 11211 > /dev/null 2>&1; then
  STATUS="healthy"
  MEMCACHED_AVAILABLE=true
  
  # Get memcached stats
  STATS=$(echo "stats" | nc localhost 11211)
  
  CURR_ITEMS=$(echo "$STATS" | grep "curr_items" | awk '{print $3}')
  TOTAL_ITEMS=$(echo "$STATS" | grep "total_items" | awk '{print $3}')
  CURR_CONNECTIONS=$(echo "$STATS" | grep "curr_connections" | awk '{print $3}')
  BYTES=$(echo "$STATS" | grep "^STAT bytes " | awk '{print $3}')
  LIMIT_MAXBYTES=$(echo "$STATS" | grep "limit_maxbytes" | awk '{print $3}')
  GET_HITS=$(echo "$STATS" | grep "get_hits" | awk '{print $3}')
  GET_MISSES=$(echo "$STATS" | grep "get_misses" | awk '{print $3}')
  
  # Calculate hit rate
  if [ "$GET_HITS" != "" ] && [ "$GET_MISSES" != "" ]; then
    TOTAL_GETS=$((GET_HITS + GET_MISSES))
    if [ $TOTAL_GETS -gt 0 ]; then
      HIT_RATE=$(awk "BEGIN {printf \"%.2f\", ($GET_HITS/$TOTAL_GETS)*100}")
    else
      HIT_RATE=0
    fi
  else
    HIT_RATE=0
  fi
  
  # Calculate memory usage percentage
  if [ "$BYTES" != "" ] && [ "$LIMIT_MAXBYTES" != "" ] && [ "$LIMIT_MAXBYTES" -gt 0 ]; then
    MEMORY_USAGE=$(awk "BEGIN {printf \"%.2f\", ($BYTES/$LIMIT_MAXBYTES)*100}")
  else
    MEMORY_USAGE=0
  fi
else
  STATUS="unhealthy"
  MEMCACHED_AVAILABLE=false
  CURR_ITEMS=0
  TOTAL_ITEMS=0
  CURR_CONNECTIONS=0
  BYTES=0
  LIMIT_MAXBYTES=0
  HIT_RATE=0
  MEMORY_USAGE=0
fi

cat <<JSON
{
  "timestamp": "${TIMESTAMP}",
  "status": "${STATUS}",
  "service": "memcached",
  "memcached_available": ${MEMCACHED_AVAILABLE},
  "current_items": ${CURR_ITEMS},
  "total_items": ${TOTAL_ITEMS},
  "current_connections": ${CURR_CONNECTIONS},
  "bytes_used": ${BYTES},
  "max_bytes": ${LIMIT_MAXBYTES},
  "hit_rate_percent": ${HIT_RATE},
  "memory_usage_percent": ${MEMORY_USAGE},
  "cache_type": "memory",
  "protocol": "memcache"
}
JSON
HEALTH_EOF

# Convert CRLF to LF if present (Windows compatibility)
RUN sed -i 's/\r$//' /usr/local/bin/memcached-health && chmod +x /usr/local/bin/memcached-health

# Switch back to memcache user
USER memcache

# Expose memcached port
EXPOSE 11211

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD /usr/local/bin/memcached-health > /dev/null || exit 1

# Start memcached with optimized settings
# -m: memory limit (128MB)
# -c: max connections (1024)
# -t: threads (4)
# -v: verbose
CMD ["memcached", "-m", "128", "-c", "1024", "-t", "4", "-v"]
