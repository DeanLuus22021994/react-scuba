# ==============================================================================
# NVIDIA Device Plugin - Lightweight GPU Runtime Support
# ==============================================================================
# Purpose: Expose NVIDIA GPUs to containers in Docker/K8s cluster
# Architecture: Minimal sidecar pattern
# Base: NVIDIA CUDA runtime for GPU detection
# Health: nvidia-smi JSON endpoint with timestamp
# ==============================================================================

FROM nvidia/cuda:12.3.1-base-ubuntu22.04

# Metadata labels
LABEL org.opencontainers.image.title="NVIDIA Device Plugin" \
  org.opencontainers.image.description="Lightweight GPU runtime support for cluster" \
  org.opencontainers.image.vendor="React Scuba" \
  maintainer="Dean Luus" \
  purpose="gpu-device-plugin" \
  gpu.support="nvidia"

# Install minimal dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  apt-get update && \
  apt-get install -y --no-install-recommends \
  curl \
  jq \
  netcat-openbsd \
  ca-certificates \
  && rm -rf /tmp/* /var/tmp/*

# Create health check script with explicit LF endings (no CRLF)
RUN cat > /usr/local/bin/gpu-health <<'GPU_HEALTH_EOF'
#!/bin/bash
set -euo pipefail

# Generate timestamp in YY-MM-DD-HH format
TIMESTAMP=$(date +"%y-%m-%d-%H-%M-%S")

# Get GPU info and format as JSON
GPU_INFO=$(nvidia-smi --query-gpu=index,name,driver_version,memory.total,memory.used,memory.free,temperature.gpu,utilization.gpu,utilization.memory \
  --format=csv,noheader,nounits | \
  awk -F', ' '{
    printf "{\"index\":%d,\"name\":\"%s\",\"driver\":\"%s\",\"memory_total_mb\":%d,\"memory_used_mb\":%d,\"memory_free_mb\":%d,\"temperature_c\":%d,\"gpu_utilization_percent\":%d,\"memory_utilization_percent\":%d},", 
    $1, $2, $3, $4, $5, $6, $7, $8, $9
  }' | \
  sed 's/,$//' | \
  jq -s '.')

echo "{\"timestamp\":\"${TIMESTAMP}\",\"status\":\"healthy\",\"gpu_available\":true,\"device_plugin\":\"nvidia\",\"gpus\":${GPU_INFO}}"
GPU_HEALTH_EOF

# Convert CRLF to LF if present (Windows compatibility)
RUN sed -i 's/\r$//' /usr/local/bin/gpu-health && chmod +x /usr/local/bin/gpu-health

# Expose health endpoint port
EXPOSE 9400

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD /usr/local/bin/gpu-health > /dev/null || exit 1

# Keep container running and serve health endpoint
CMD while true; do \
  HEALTH_DATA=$(/usr/local/bin/gpu-health); \
  printf "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s" "${#HEALTH_DATA}" "$HEALTH_DATA" | nc -l -p 9400 -q 1; \
  done
