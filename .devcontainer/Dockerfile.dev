# ====================================================================================
# Multi-Stage Dockerfile for React Development with Precompiled node_modules
# ====================================================================================
# Stage 1: Builder - Install and build dependencies
# Stage 2: Runtime - Copy only built modules, minimal footprint
# Target image size: ~300MB (vs 1GB+ single-stage)
# Startup time: <10s with volume caching
# ====================================================================================

# ==== STAGE 1: BUILDER ====
FROM node:25-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
  python3 \
  make \
  g++ \
  git \
  && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files first (layer caching optimization)
COPY package.json package-lock.json* ./

# Install ALL dependencies (including devDependencies for build)
# Use npm ci for reproducible builds
RUN --mount=type=cache,target=/root/.npm \
  npm ci --prefer-offline --no-audit

# ==== STAGE 2: RUNTIME ====
FROM node:25-alpine AS runtime

# Install runtime dependencies only
RUN apk add --no-cache \
  tini \
  && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
  adduser -S nodejs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy node_modules from builder (precompiled and optimized)
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy package files (needed for npm scripts)
COPY --chown=nodejs:nodejs package.json package-lock.json* ./

# Switch to non-root user
USER nodejs

# Expose Vite dev server port
EXPOSE 5173

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
  CMD node -e "console.log('healthy')" || exit 1

# Use tini as entrypoint (proper signal handling for Node.js)
ENTRYPOINT ["/sbin/tini", "--"]

# Default command: start Vite dev server
# Mount workspace at /app for hot reload
CMD ["npm", "run", "start"]
