# Docker Compose MCP Cluster - Infrastructure Services Only
# MCP stdio servers (filesystem, git, fetch, github, memory) configured in devcontainer.json
# Single command: docker-compose -f .devcontainer/docker-compose.mcp.yml up --build
# Tier 1: Databases → Tier 2: MCP DB Services → Tier 3: Tools → Tier 4: DevContainer

services:
  # ==== TIER 1: Databases (starts first) ====
  postgres-db:
    image: postgres:16-alpine
    container_name: postgres-db
    hostname: postgres-db
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.20
    ports:
      - "5432:5432"
    env_file:
      - devcontainer.env
    environment:
      - POSTGRES_PASSWORD=${DOCKER_POSTGRES_PASSWORD:-password}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command:
      - postgres
      - -c
      - shared_buffers=64MB
      - -c
      - max_connections=50
      - -c
      - work_mem=4MB
      - -c
      - maintenance_work_mem=32MB
      - -c
      - effective_cache_size=128MB
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped
    stop_grace_period: 10s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s

  mariadb:
    image: mariadb:11-jammy
    container_name: mariadb
    hostname: mariadb
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.21
    ports:
      - "3306:3306"
    env_file:
      - devcontainer.env
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_PASSWORD:-password}
      - MARIADB_DATABASE=mcp_db
    volumes:
      - mariadb-data:/var/lib/mysql
    command: --innodb-buffer-pool-size=256M --max-connections=200
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s

  # ==== TIER 2: MCP Database Services (after databases) ====
  postgres-mcp:
    build:
      context: ./containers/postgres
      dockerfile: Dockerfile
    image: mcp-postgres:latest
    container_name: postgres-mcp
    hostname: postgres-mcp
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.31
    env_file:
      - devcontainer.env
    environment:
      - POSTGRES_CONNECTION=postgresql://postgres:${DOCKER_POSTGRES_PASSWORD:-password}@postgres-db:5432/postgres
    volumes:
      - postgres-node-cache:/cache/node
      - postgres-cache:/cache/pg
    stdin_open: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('healthy')"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      postgres-db:
        condition: service_healthy

  mariadb-mcp:
    build:
      context: ./containers/mariadb
      dockerfile: Dockerfile
    image: mcp-mariadb:latest
    container_name: mariadb-mcp
    hostname: mariadb-mcp
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.32
    env_file:
      - devcontainer.env
    environment:
      - MARIADB_CONNECTION=mysql://root:${MARIADB_PASSWORD:-password}@mariadb:3306/mcp_db
      - MARIADB_PASSWORD=${MARIADB_PASSWORD:-password}
    volumes:
      - mariadb-node-cache:/cache/node
      - mariadb-cache:/cache/mariadb
    stdin_open: true
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "mariadb",
          "-h",
          "mariadb",
          "-u",
          "root",
          "-p${MARIADB_PASSWORD:-password}",
          "-e",
          "SELECT 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 25s
    depends_on:
      mariadb:
        condition: service_healthy

  # ==== TIER 3: Experimental & Tools (after databases) ====
  python-experimental:
    build:
      context: ./mcp/python-experimental
      dockerfile: Dockerfile
    image: python-experimental:3.15.0a1
    container_name: python-experimental
    hostname: python-experimental
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.40
    env_file:
      - devcontainer.env
    volumes:
      - python-exp-cache:/cache/python
      - ../:/workspace
    working_dir: /workspace
    stdin_open: true
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "/app/health.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  k8s-plugin:
    build:
      context: ./containers/k8s-plugin
      dockerfile: Dockerfile
    image: k8s-plugin:latest
    container_name: k8s-plugin
    hostname: k8s-plugin
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.50
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - k8s-config:/root/.kube
      - k8s-cache:/cache/k8s
    env_file:
      - devcontainer.env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nvidia-smi"]
      interval: 30s
      timeout: 10s
      retries: 3

  buildkit:
    image: moby/buildkit:latest
    container_name: buildkit-daemon
    hostname: buildkit
    privileged: true
    ports:
      - "1234:1234"
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.55
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - buildkit-cache:/var/lib/buildkit
      - buildkit-tmp:/tmp
    environment:
      - BUILDKIT_STEP_LOG_MAX_SIZE=10485760
    command:
      - --addr
      - tcp://0.0.0.0:1234
      - --oci-worker-gc=true
      - --oci-worker-gc-keepstorage=5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "buildctl", "debug", "info"]
      interval: 30s
      timeout: 10s
      retries: 3

  runner:
    image: myoung34/github-runner:latest
    container_name: github-actions-runner
    hostname: gh-runner-01
    privileged: true
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.56
    volumes:
      - runner-work:/work
      - runner-cache:/.cache
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - devcontainer.env
    environment:
      - ACCESS_TOKEN=${GITHUB_TOKEN}
      - REPO_URL=https://github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}
      - RUNNER_NAME=docker-runner-01
      - RUNNER_WORKDIR=/work
      - LABELS=docker,linux,x64,self-hosted
      - EPHEMERAL=true
      - START_DOCKER_SERVICE=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "Runner.Listener"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==== Gateway Monitoring Stack ====
  # cAdvisor - Container metrics exporter
  cadvisor:
    build:
      context: ./containers/exporters/cadvisor
      dockerfile: Dockerfile
    image: mcp-cadvisor:latest
    container_name: mcp-cadvisor
    hostname: cadvisor
    privileged: true
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.75
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - Host metrics
  node-exporter:
    build:
      context: ./containers/exporters/node-exporter
      dockerfile: Dockerfile
    image: mcp-node-exporter:latest
    container_name: mcp-node-exporter
    hostname: node-exporter
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.76
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9100/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter
  postgres-exporter:
    build:
      context: ./containers/exporters/postgres-exporter
      dockerfile: Dockerfile
    image: mcp-postgres-exporter:latest
    container_name: mcp-postgres-exporter
    hostname: postgres-exporter
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.77
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${DOCKER_POSTGRES_PASSWORD:-password}@postgres-db:5432/postgres?sslmode=disable
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9187/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres-db:
        condition: service_healthy

  # MySQL/MariaDB Exporter
  mysql-exporter:
    build:
      context: ./containers/exporters/mysql-exporter
      dockerfile: Dockerfile
    image: mcp-mysql-exporter:latest
    container_name: mcp-mysql-exporter
    hostname: mysql-exporter
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.78
    ports:
      - "9104:9104"
    env_file:
      - devcontainer.env
    environment:
      - DATA_SOURCE_NAME=root:${MARIADB_PASSWORD:-password}@tcp(mariadb:3306)/
    command:
      - --collect.global_status
      - --collect.info_schema.innodb_metrics
      - --collect.auto_increment.columns
      - --collect.info_schema.processlist
      - --collect.binlog_size
      - --collect.info_schema.tablestats
      - --collect.global_variables
      - --collect.info_schema.query_response_time
      - --collect.info_schema.userstats
      - --collect.info_schema.tables
      - --collect.perf_schema.tablelocks
      - --collect.perf_schema.file_events
      - --collect.perf_schema.eventswaits
      - --collect.perf_schema.indexiowaits
      - --collect.perf_schema.tableiowaits
      - --collect.slave_status
      - --web.listen-address=:9104
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9104/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      mariadb:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: tbc-nginx
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.70
    volumes:
      - ./containers/gateway/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./containers/gateway/config/ssl:/etc/nginx/ssl:ro
    env_file:
      - devcontainer.env
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: tbc-prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.71
    volumes:
      - ./containers/gateway/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    env_file:
      - devcontainer.env
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: tbc-grafana
    hostname: grafana
    ports:
      - "3000:3000"
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.72
    volumes:
      - grafana-data:/var/lib/grafana
      - ./containers/gateway/config/grafana/provisioning:/etc/grafana/provisioning:ro
    env_file:
      - devcontainer.env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/json/mcp-cluster-overview.json
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==== TIER 4: DevContainer (after all services) ====
  devcontainer:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    image: mcp-devcontainer:latest
    container_name: devcontainer
    hostname: devcontainer
    networks:
      mcp-cluster:
        ipv4_address: 172.20.0.60
    ports:
      - "5173:5173"
      - "8080:8080"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, compute, utility]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    env_file:
      - devcontainer.env
    volumes:
      - ../:/workspaces
      - devcontainer-cache:/cache
    working_dir: /workspaces
    command: sleep infinity
    stdin_open: true
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      postgres-db:
        condition: service_healthy
      mariadb:
        condition: service_healthy

# Named volumes for persistence
volumes:
  postgres-data:
    name: postgres-data
  postgres-node-cache:
    name: postgres-node-cache
  postgres-cache:
    name: postgres-cache
  mariadb-data:
    name: mariadb-data
  mariadb-node-cache:
    name: mariadb-node-cache
  mariadb-cache:
    name: mariadb-cache
  python-exp-cache:
    name: python-exp-cache
  k8s-config:
    name: k8s-config
  k8s-cache:
    name: k8s-cache
  buildkit-cache:
    name: buildkit-cache
  buildkit-tmp:
    name: buildkit-tmp
  runner-work:
    name: runner-work
  runner-cache:
    name: runner-cache
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data
  devcontainer-cache:
    name: devcontainer-cache

# Custom network with static IPs
networks:
  mcp-cluster:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
