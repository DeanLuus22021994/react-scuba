# ==============================================================================
# Build Tools - CI/CD and Development Utilities
# ==============================================================================
# Purpose: Reusable build environment for testing, linting, type checking
# Architecture: Full development stack with testing frameworks
# Base: node-compiler (pre-configured build environment)
# Optimization: All tools retained, optimized for headless execution
# Separation of Concerns: Build tools only, no runtime services
# ==============================================================================

# ============================================================================
# Stage 1: Compile - Build complete workspace
# ============================================================================
FROM node:22-slim AS compile

LABEL stage="compile" description="Build stage for development tools"

# Install build-time dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    make \
    g++ \
    ca-certificates \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Configure npm for optimal performance
ENV NPM_CONFIG_CACHE=/build/.npm-cache \
    NPM_CONFIG_LOGLEVEL=warn \
    NODE_OPTIONS="--max-old-space-size=2048" \
    NODE_ENV=development

WORKDIR /build

# Create npm cache directory for layer caching
RUN mkdir -p /build/.npm-cache && chmod -R 777 /build/.npm-cache

# Copy full workspace
COPY server/package.json server/package-lock.json ./
COPY server/packages ./packages
COPY server/apps/api ./apps/api
COPY server/apps/web ./apps/web
COPY server/apps/docs ./apps/docs

# Install all dependencies with dev tools
RUN npm ci --prefer-offline --no-audit --no-fund --legacy-peer-deps

# Run build to cache build outputs
RUN npm run build 2>/dev/null || true

# ============================================================================
# Stage 2: Runtime - Build tools environment
# ============================================================================
FROM node:22-slim

LABEL \
    org.opencontainers.image.title="React Scuba Build Tools" \
    org.opencontainers.image.description="Build environment for testing, linting, and CI/CD" \
    org.opencontainers.image.vendor="React Scuba" \
    maintainer="Dean Luus" \
    purpose="build-tools" \
    version="0.1.0" \
    node.version="22-slim" \
    architecture="x86_64"

# Install comprehensive build tools and utilities
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    dumb-init \
    curl \
    git \
    python3 \
    make \
    g++ \
    bash \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Create build user (uid 1003 avoids conflicts)
RUN useradd -m -u 1003 -s /bin/bash build-user

WORKDIR /app

# Build environment configuration
ENV NODE_ENV=development \
    NODE_OPTIONS="--max-old-space-size=2048" \
    NPM_CONFIG_LOGLEVEL=warn

# Copy complete workspace with all dev dependencies
COPY --from=compile --chown=build-user:build-user /build ./

# Create cache and output directories
RUN mkdir -p /cache /output && chown -R build-user:build-user /cache /output

# Expose common development ports
EXPOSE 9090 3000 5173 8080

# Health check (node and npm available)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD node --version && npm --version > /dev/null || exit 1

# Switch to build user
USER build-user

# Use dumb-init to handle signals
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Default command (can run tests, linting, builds, etc.)
CMD ["/bin/bash"]
