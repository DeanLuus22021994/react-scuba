# ==============================================================================
# Node.js API Server Configuration
# ==============================================================================
# Purpose: Express.js REST API server for React Scuba application
# Location: .devcontainer/infrastructure/services/api/
# Usage: docker compose -f docker-compose.api.yml up
# Port: 8003 (host) -> 3000 (container)
# Health: http://localhost:8003/health
# ==============================================================================

services:
  node-api:
    build:
      context: ../../../../..
      dockerfile: .devcontainer/infrastructure/services/api/dockerfile
    image: react-scuba-api:latest
    pull_policy: build
    container_name: node-api
    hostname: node-api
    profiles:
      - full
      - app
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.64
    ports:
      - "8003:3000"
    env_file:
      - ../../../../../devcontainer.env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - API_LOG_LEVEL=info
      - DB_HOST=mariadb
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=${DOCKER_MARIADB_PASSWORD:-password}
      - DB_NAME=scuba_booking_db
      - CACHE_HOST=memcached
      - CACHE_PORT=11211
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - api-logs:/var/log/api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    stdin_open: true
    tty: false
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "com.react-scuba.service=node-api"

volumes:
  api-logs:
    name: api-logs
  api-data:
    name: api-data
