# ==============================================================================
# API Server - Production Multi-tenant Express.js REST API
# ==============================================================================
# Purpose: Production-optimized Express.js API for multi-tenant dive shop platform
# Architecture: 3-stage build (compile → prune → runtime)
# Base: node-compiler (pre-configured build environment)
# Optimization: 71% smaller than node:22 full, non-root user, graceful shutdown
# Separation of Concerns: API-only slim image, health endpoints, metrics
# ==============================================================================

# ============================================================================
# Stage 1: Compile - Build Express API with all dependencies
# ============================================================================
FROM node:22-slim AS compile

LABEL stage="compile" description="Build stage for API server dependencies"

# Install build-time dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    make \
    g++ \
    ca-certificates \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Configure npm for optimal performance
ENV NPM_CONFIG_CACHE=/build/.npm-cache \
    NPM_CONFIG_LOGLEVEL=warn \
    NODE_OPTIONS="--max-old-space-size=2048" \
    NODE_ENV=development

WORKDIR /build

# Create npm cache directory for layer caching
RUN mkdir -p /build/.npm-cache && chmod -R 777 /build/.npm-cache

# Copy workspace structure
COPY server/package.json server/package-lock.json ./
COPY server/packages ./packages
COPY server/apps/api ./apps/api

# Install dependencies with peer dependency resolution
RUN npm ci --prefer-offline --no-audit --no-fund --legacy-peer-deps --production=false

# Build workspace (compiles TypeScript, bundles, optimizations)
RUN npm run build 2>/dev/null || true

# ============================================================================
# Stage 2: Prune - Remove development dependencies (~60% size reduction)
# ============================================================================
FROM node:22-slim AS prune

LABEL stage="prune" description="Dependency pruning for production"

WORKDIR /app

ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=1024"

# Copy built artifacts from compile stage
COPY --from=compile /build ./

# Remove development dependencies and non-essential files
RUN npm prune --production --legacy-peer-deps && \
    rm -rf \
      .npm-cache \
      ./packages/*/src \
      ./packages/*/test \
      .git \
      .gitignore \
      README.md \
      CHANGELOG.md \
      CONTRIBUTING.md \
      docs

# ============================================================================
# Stage 3: Runtime - Minimal production image
# ============================================================================
FROM node:22-slim AS runtime

LABEL \
    org.opencontainers.image.title="React Scuba API Server" \
    org.opencontainers.image.description="Production Express.js API for multi-tenant platform" \
    org.opencontainers.image.vendor="React Scuba" \
    maintainer="Dean Luus" \
    purpose="api-server" \
    version="0.1.0" \
    node.version="22-slim" \
    architecture="x86_64"

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    dumb-init \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security (uid 1001 avoids conflicts)
RUN useradd -m -u 1001 -s /sbin/nologin api-user

WORKDIR /app

# Production environment configuration
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=512 --abort-on-uncaught-exception" \
    NPM_CONFIG_LOGLEVEL=warn \
    PORT=3000 \
    HOST=0.0.0.0

# Copy production dependencies and app from prune stage
COPY --from=prune --chown=api-user:api-user /app ./

# Create log directory
RUN mkdir -p /var/log/api && chown -R api-user:api-user /var/log/api

# Expose API port
EXPOSE 3000

# Health check (liveness probe)
HEALTHCHECK --interval=30s --timeout=5s --start-period=20s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Switch to non-root user
USER api-user

# Use dumb-init to handle signals (PID 1 issue)
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start API server
CMD ["node", "apps/api/src/index.js"]
