# ==============================================================================
# MarkItDown MCP Server - Document Conversion Service
# ==============================================================================
# Purpose: Convert various document formats to Markdown via MCP protocol
# Architecture: Python-based MCP server with document parsing libraries
# Base: Python 3.11 slim
# Formats: PDF, DOCX, HTML, XLSX, PPTX, images (OCR)
# ==============================================================================

FROM python:3.11-slim

# Metadata labels
LABEL org.opencontainers.image.title="MarkItDown MCP Server" \
  org.opencontainers.image.description="Document to Markdown conversion MCP server" \
  org.opencontainers.image.vendor="React Scuba" \
  maintainer="Dean Luus" \
  purpose="mcp-document-conversion" \
  mcp.type="stdio" \
  conversion.formats="pdf,docx,html,xlsx,pptx,images"

# Install system dependencies for document processing
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  apt-get update && \
  apt-get install -y --no-install-recommends \
  poppler-utils \
  tesseract-ocr \
  libreoffice \
  curl \
  jq \
  && rm -rf /tmp/* /var/tmp/*

# Install Python packages for document conversion
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  pip install --no-cache-dir \
  markitdown \
  pypdf2 \
  python-docx \
  openpyxl \
  python-pptx \
  beautifulsoup4 \
  pillow \
  pytesseract \
  mcp

# Create MCP server script
RUN cat > /usr/local/bin/markitdown-server <<'SERVER_EOF'
#!/usr/bin/env python3
import sys
import json
from mcp.server import Server
from mcp.server.stdio import stdio_server
from markitdown import MarkItDown

app = Server("markitdown-mcp")
converter = MarkItDown()

@app.list_tools()
async def list_tools():
    return [
        {
            "name": "convert_to_markdown",
            "description": "Convert document to Markdown format",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "file_path": {
                        "type": "string",
                        "description": "Path to document file"
                    },
                    "format": {
                        "type": "string",
                        "enum": ["pdf", "docx", "html", "xlsx", "pptx", "image"],
                        "description": "Document format"
                    }
                },
                "required": ["file_path", "format"]
            }
        }
    ]

@app.call_tool()
async def call_tool(name: str, arguments: dict):
    if name == "convert_to_markdown":
        try:
            result = converter.convert(arguments["file_path"])
            return {
                "content": [
                    {
                        "type": "text",
                        "text": result.text_content
                    }
                ]
            }
        except Exception as e:
            return {"error": str(e)}

async def main():
    async with stdio_server() as (read_stream, write_stream):
        await app.run(read_stream, write_stream, app.create_initialization_options())

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
SERVER_EOF

# Convert CRLF to LF if present (Windows compatibility)
RUN sed -i 's/\r$//' /usr/local/bin/markitdown-server && chmod +x /usr/local/bin/markitdown-server

# Create health check script
RUN cat > /usr/local/bin/markitdown-health <<'HEALTH_EOF'
#!/bin/bash
set -euo pipefail

TIMESTAMP=$(date +"%y-%m-%d-%H-%M-%S")

# Check Python availability
if PYTHON_VERSION=$(python3 --version 2>&1); then
  PYTHON_AVAILABLE=true
  STATUS="healthy"
else
  PYTHON_AVAILABLE=false
  STATUS="unhealthy"
  PYTHON_VERSION="unavailable"
fi

# Check markitdown module
if python3 -c "import markitdown" 2>/dev/null; then
  MARKITDOWN_AVAILABLE=true
else
  MARKITDOWN_AVAILABLE=false
fi

cat <<JSON
{
  "timestamp": "${TIMESTAMP}",
  "status": "${STATUS}",
  "service": "markitdown-mcp",
  "python_version": "${PYTHON_VERSION}",
  "python_available": ${PYTHON_AVAILABLE},
  "markitdown_available": ${MARKITDOWN_AVAILABLE},
  "mcp_type": "stdio",
  "supported_formats": ["pdf", "docx", "html", "xlsx", "pptx", "images"]
}
JSON
HEALTH_EOF

# Convert CRLF to LF if present (Windows compatibility)
RUN sed -i 's/\r$//' /usr/local/bin/markitdown-health && chmod +x /usr/local/bin/markitdown-health

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD /usr/local/bin/markitdown-health > /dev/null || exit 1

# Working directory
WORKDIR /workspace

# Keep container running for MCP stdio communication
CMD ["tail", "-f", "/dev/null"]
