# ==============================================================================
# GitHub Actions Self-Hosted Runner - Enterprise Container Image
# ==============================================================================
# Purpose: Production-ready, self-hosted GitHub Actions runner with GPU support
# Architecture: Multi-stage build with security-first design
# Base: Debian Bookworm Slim for glibc compatibility
# Runtime: Non-root user with restricted permissions
# Init: tini for proper signal handling and zombie reaping
# GPU: NVIDIA runtime support with health endpoint
# ==============================================================================

# ==============================================================================
# Stage 1: Builder - Download and Extract Runner Binaries
# ==============================================================================
FROM alpine:3.20 AS builder

# Build arguments for version pinning and architecture
ARG RUNNER_VERSION="2.317.0"
ARG TARGETARCH

# Install build-time dependencies
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
  apk add --no-cache \
  curl \
  tar \
  jq

# Determine architecture mapping (GitHub uses x64/arm64, Docker uses amd64/arm64)
RUN case ${TARGETARCH} in \
  "amd64") echo "x64" > /tmp/arch ;; \
  "arm64") echo "arm64" > /tmp/arch ;; \
  *) echo "Unsupported architecture: ${TARGETARCH}" && exit 1 ;; \
  esac

# Download and verify GitHub Actions runner
WORKDIR /actions-runner
RUN ARCH=$(cat /tmp/arch) && \
  echo "Downloading GitHub Actions runner ${RUNNER_VERSION} for ${ARCH}..." && \
  curl -fsSL -o runner.tar.gz \
  "https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${ARCH}-${RUNNER_VERSION}.tar.gz" && \
  tar xzf runner.tar.gz && \
  rm runner.tar.gz && \
  echo "Runner binaries extracted successfully"

# ==============================================================================
# Stage 2: Runtime - Debian Slim for glibc compatibility
# ==============================================================================
FROM debian:bookworm-slim AS runtime

# Metadata labels following OCI standards
LABEL org.opencontainers.image.title="GitHub Actions Self-Hosted Runner" \
  org.opencontainers.image.description="Enterprise-grade GitHub Actions runner with GPU support" \
  org.opencontainers.image.version="2.317.0" \
  org.opencontainers.image.vendor="React Scuba" \
  org.opencontainers.image.base.name="debian:bookworm-slim" \
  maintainer="Dean Luus" \
  purpose="github-actions-runner" \
  security.user="non-root" \
  security.init="tini" \
  gpu.support="nvidia"

# Install runtime dependencies including NVIDIA utilities
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  apt-get update && \
  apt-get install -y --no-install-recommends \
  git \
  curl \
  jq \
  tini \
  ca-certificates \
  libicu72 \
  && rm -rf /tmp/* /var/tmp/*

# Create non-root user and group with explicit UID/GID for consistency
RUN groupadd -g 1001 runner && \
  useradd -u 1001 -g runner -m -d /home/runner -s /bin/bash runner

# Set up directory structure with proper ownership
RUN mkdir -p /home/runner/_work /home/runner/bin && \
  chown -R runner:runner /home/runner

# Copy runner binaries from builder stage
COPY --from=builder --chown=runner:runner /actions-runner /home/runner/

# Embed entrypoint script directly
RUN cat > /home/runner/bin/entrypoint.sh <<'ENTRYPOINT_EOF'
#!/bin/bash
set -euo pipefail

# Environment variables validation
: "${GITHUB_OWNER?Missing GITHUB_OWNER}"
: "${GITHUB_REPO?Missing GITHUB_REPO}"
: "${GITHUB_PAT?Missing GITHUB_PAT}"
: "${RUNNER_NAME?Missing RUNNER_NAME}"

# API URL for registration token
API_URL="https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/actions/runners/registration-token"

echo "Requesting registration token from GitHub API..."

# Fetch the token
RUNNER_TOKEN=$(curl -s -X POST \
  -H "Authorization: token ${GITHUB_PAT}" \
  -H "Accept: application/vnd.github.v3+json" \
  "${API_URL}" | jq -r .token)

if [ -z "$RUNNER_TOKEN" ] || [ "$RUNNER_TOKEN" = "null" ]; then
    echo "Error: Failed to get runner registration token. Check GITHUB_PAT permissions."
    exit 1
fi

echo "Successfully fetched registration token."

# Unregister runner on exit
cleanup() {
    echo "Caught SIGTERM. Unregistering runner..."
    ./config.sh remove --token "${RUNNER_TOKEN}" || true
    exit 0
}

trap cleanup TERM INT

# Configure the runner
echo "Configuring runner..."
./config.sh \
    --url "https://github.com/${GITHUB_OWNER}/${GITHUB_REPO}" \
    --token "${RUNNER_TOKEN}" \
    --name "${RUNNER_NAME}" \
    --work "/home/runner/_work" \
    --labels "${RUNNER_LABELS:-self-hosted,linux,x64,docker,gpu}" \
    --unattended \
    --replace

# Start the runner
echo "Starting runner..."
./run.sh &

RUNNER_PID=$!

# Wait for runner to exit
wait $RUNNER_PID
ENTRYPOINT_EOF

# Convert CRLF to LF and make script executable (Windows compatibility)
RUN sed -i 's/\r$//' /home/runner/bin/entrypoint.sh && chmod +x /home/runner/bin/entrypoint.sh

# Embed GPU health check script
RUN cat > /home/runner/bin/gpu-health.sh <<'GPU_HEALTH_EOF'
#!/bin/bash
set -euo pipefail

# Generate timestamp in YY-MM-DD-HH format
TIMESTAMP=$(date +"%y-%m-%d-%H")

# Check if nvidia-smi is available
if command -v nvidia-smi &> /dev/null; then
  # Get GPU info and format as JSON
  GPU_INFO=$(nvidia-smi --query-gpu=index,name,driver_version,memory.total,memory.used,memory.free,temperature.gpu,utilization.gpu \
    --format=csv,noheader,nounits | \
    awk -F', ' '{print "{\"index\":"$1",\"name\":\""$2"\",\"driver\":\""$3"\",\"memory_total\":"$4",\"memory_used\":"$5",\"memory_free\":"$6",\"temperature\":"$7",\"utilization\":"$8"}"}' | \
    jq -s '.')
  
  echo "{\"timestamp\":\"${TIMESTAMP}\",\"status\":\"healthy\",\"gpu_available\":true,\"gpus\":${GPU_INFO}}"
else
  echo "{\"timestamp\":\"${TIMESTAMP}\",\"status\":\"healthy\",\"gpu_available\":false,\"message\":\"nvidia-smi not found\"}"
fi
GPU_HEALTH_EOF

# Convert CRLF to LF if present (Windows compatibility)
RUN sed -i 's/\r$//' /home/runner/bin/gpu-health.sh && chmod +x /home/runner/bin/gpu-health.sh

# Switch to non-root user
USER runner

# Set working directory
WORKDIR /home/runner

# Environment variables
ENV RUNNER_ALLOW_RUNASROOT=0 \
  RUNNER_WORK_DIRECTORY=/home/runner/_work \
  PATH=/home/runner/bin:${PATH}

# Health check: Verify runner listener process is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD pgrep -u runner Runner.Listener || exit 1

# Entrypoint: tini for proper init, then our entrypoint script
ENTRYPOINT ["/usr/bin/tini", "--", "/home/runner/bin/entrypoint.sh"]

# Default command (can be overridden)
CMD []
