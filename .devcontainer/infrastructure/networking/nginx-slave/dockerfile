# ==============================================================================
# Nginx Load Balancer Slave - Backend Worker Node
# ==============================================================================
# Purpose: Backend worker node for distributed load handling
# Architecture: Slave node serving application content
# Base: Official Nginx Alpine
# Features: Static content, proxy to services, health reporting
# ==============================================================================

FROM nginx:alpine

# Metadata labels
LABEL org.opencontainers.image.title="Nginx Load Balancer Slave" \
  org.opencontainers.image.description="Backend worker node for load balancing" \
  org.opencontainers.image.vendor="React Scuba" \
  maintainer="Dean Luus" \
  purpose="network-loadbalancer-slave" \
  network.role="slave" \
  load.balancing="true"

# Install additional utilities
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
  apk add --no-cache \
  curl \
  jq \
  bash \
  ca-certificates

# Create nginx slave configuration
RUN cat > /etc/nginx/nginx.conf <<'NGINX_EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 512;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "slave: $hostname"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 50M;

    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_types text/plain text/css application/json application/javascript text/xml;

    # Health check endpoint
    server {
        listen 8080;
        server_name _;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location /nginx_status {
            stub_status on;
            access_log off;
        }
    }

    # Application server
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy to backend services if needed
        location /api/ {
            proxy_pass http://node-api:3000/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
}
NGINX_EOF

# Create default index page
RUN cat > /usr/share/nginx/html/index.html <<'HTML_EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Nginx Slave Node</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .info { background: #f0f0f0; padding: 20px; border-radius: 5px; }
    </style>
</head>
<body>
    <h1>Nginx Slave Node</h1>
    <div class="info">
        <p><strong>Status:</strong> Online</p>
        <p><strong>Hostname:</strong> <span id="hostname"></span></p>
        <p><strong>Role:</strong> Backend Worker</p>
    </div>
    <script>
        fetch('/health').then(r => r.text()).then(t => {
            document.getElementById('hostname').textContent = window.location.hostname;
        });
    </script>
</body>
</html>
HTML_EOF

# Create health check script
RUN cat > /usr/local/bin/nginx-slave-health <<'HEALTH_EOF'
#!/bin/bash
set -euo pipefail

TIMESTAMP=$(date +"%y-%m-%d-%H-%M-%S")
HOSTNAME=$(hostname)

# Check nginx status
if curl -sf http://localhost:8080/health > /dev/null 2>&1; then
  STATUS="healthy"
  NGINX_AVAILABLE=true
else
  STATUS="unhealthy"
  NGINX_AVAILABLE=false
fi

# Get nginx stats
if STATS=$(curl -sf http://localhost:8080/nginx_status 2>&1); then
  ACTIVE_CONNECTIONS=$(echo "$STATS" | grep "Active connections" | awk '{print $3}')
  REQUESTS=$(echo "$STATS" | awk '/^[0-9]/ {print $3; exit}')
else
  ACTIVE_CONNECTIONS=0
  REQUESTS=0
fi

cat <<JSON
{
  "timestamp": "${TIMESTAMP}",
  "status": "${STATUS}",
  "service": "nginx-slave",
  "hostname": "${HOSTNAME}",
  "nginx_available": ${NGINX_AVAILABLE},
  "active_connections": ${ACTIVE_CONNECTIONS},
  "total_requests": ${REQUESTS},
  "role": "slave",
  "reporting_to": "nginx-master"
}
JSON
HEALTH_EOF

# Convert CRLF to LF if present (Windows compatibility)
RUN sed -i 's/\r$//' /usr/local/bin/nginx-slave-health && chmod +x /usr/local/bin/nginx-slave-health

# Expose ports
EXPOSE 80 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD /usr/local/bin/nginx-slave-health > /dev/null || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
