# ==============================================================================
# docker-compose.monitoring.yml - Monitoring Services
# ==============================================================================
# Purpose: Metrics collection, visualization, and alerting
# Services: Prometheus, Grafana, cAdvisor, node-exporter, database exporters
# Network: mcp-cluster (172.28.0.0/16)
# Usage: Included via main docker-compose.yml
# ==============================================================================

# Include exporter service configurations from their respective directories
include:
  - path: ../monitoring/exporters/postgres/docker-compose.postgres-exporter.yml
  - path: ../monitoring/exporters/mysql/docker-compose.mysql-exporter.yml

services:
  # ==== Monitoring Stack ====
  prometheus:
    build:
      context: ../monitoring/prometheus
      dockerfile: dockerfile
    image: mcp-prometheus:latest
    pull_policy: build
    container_name: tbc-prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.71
    volumes:
      - type: bind
        source: ../monitoring/config/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - react_scuba_prometheus-data:/prometheus
    env_file:
      - ../../../devcontainer.env
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: tbc-grafana
    hostname: grafana
    ports:
      - "3000:3000"
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.72
    volumes:
      - react_scuba_grafana-data:/var/lib/grafana
      # Provisioning configurations
      - type: bind
        source: ../monitoring/grafana/provisioning/datasources/prometheus.datasource
        target: /etc/grafana/provisioning/datasources/prometheus.yaml
        read_only: true
      - type: bind
        source: ../monitoring/grafana/provisioning/dashboards/dashboards.yml
        target: /etc/grafana/provisioning/dashboards/dashboards.yml
        read_only: true
      # Dashboard structure - complete dashboards
      - type: bind
        source: ../monitoring/grafana/dashboards/complete
        target: /etc/grafana/dashboards/complete
        read_only: true
      # Dashboard structure - reusable components (for reference/future use)
      - type: bind
        source: ../monitoring/grafana/dashboards/common
        target: /etc/grafana/dashboards/common
        read_only: true
      - type: bind
        source: ../monitoring/grafana/dashboards/panels
        target: /etc/grafana/dashboards/panels
        read_only: true
    env_file:
      - ../../../devcontainer.env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/complete/cluster.json
      - GF_DATABASE_WAL=true
      - GF_DATABASE_CACHE_MODE=shared
      - GF_LOG_LEVEL=warn
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      prometheus:
        condition: service_healthy

  # ==== Metrics Exporters ====
  cadvisor:
    build:
      context: ../monitoring/exporters/cadvisor
      dockerfile: dockerfile
    image: mcp-cadvisor:latest
    pull_policy: build
    container_name: mcp-cadvisor
    hostname: cadvisor
    privileged: true
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.75
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    command:
      - "--docker_only=true"
      - "--housekeeping_interval=10s"
      - "--max_housekeeping_interval=30s"
      - "--storage_duration=2m"
      - "--disable_metrics=disk,diskIO,network,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,cpu_topology,resctrl"
      - "--store_container_labels=false"
      - "--event_storage_event_limit=default=0"
      - "--event_storage_age_limit=default=0"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  node-exporter:
    build:
      context: ../monitoring/exporters/node
      dockerfile: dockerfile
    image: mcp-node-exporter:latest
    pull_policy: build
    container_name: mcp-node-exporter
    hostname: node-exporter
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.76
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      - "--no-collector.diskstats"
    restart: unless-stopped
    # Health check disabled - causes excessive connection resets with Prometheus scraping
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--quiet",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:9100/metrics",
    #     ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # postgres-exporter and mysql-exporter configurations are included from:
  # - ../monitoring/exporters/postgres/docker-compose.postgres-exporter.yml
  # - ../monitoring/exporters/mysql/docker-compose.mysql-exporter.yml
