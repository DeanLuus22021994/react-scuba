# ==============================================================================
# docker-compose.mcp.yml - Model Context Protocol Services
# ==============================================================================
# Purpose: MCP (Model Context Protocol) servers for AI/LLM integration
# Services: 8 MCP servers (discovery, fetch, filesystem, git, github, markitdown, memory, python)
# Network: mcp-cluster (172.28.0.0/16)
# Usage: docker-compose -f docker-compose.yml -f .devcontainer/infrastructure/compose/mcp.yml up
# Discovery: Auto-discovery via localhost:9097/services
# ==============================================================================

name: react-scuba-mcp

services:
  # ==== MCP Discovery Service ====
  # Role: Service discovery, health aggregation, protocol validation
  # Port: 9097 (health dashboard), 5005 (discovery protocol)
  # Health Dashboard: http://localhost:9097/services
  mcp-discovery:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/discovery
      dockerfile: dockerfile
    image: mcp-discovery:latest
    container_name: mcp-discovery
    hostname: mcp-discovery
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.33
    ports:
      - "9097:9097"
      - "5005:5005"
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_DISCOVERY_MODE=standalone
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9097/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ==== MCP Fetch Service ====
  # Role: HTTP/HTTPS content fetching, web scraping
  # Capabilities: SSL verification, proxy support, rate limiting
  mcp-fetch:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/fetch
      dockerfile: dockerfile
    image: mcp-fetch:latest
    container_name: mcp-fetch
    hostname: mcp-fetch
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.34
    ports:
      - "5006:5006"
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_TIMEOUT=30
      - MCP_MAX_CONTENT=10485760
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mcp-discovery:
        condition: service_started
        required: false

  # ==== MCP Filesystem Service ====
  # Role: Safe file system access with sandboxing
  # Root: /data (mounted host data volume)
  # Permissions: Read/write with access control lists
  mcp-filesystem:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/filesystem
      dockerfile: dockerfile
    image: mcp-filesystem:latest
    container_name: mcp-filesystem
    hostname: mcp-filesystem
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.35
    ports:
      - "5007:5007"
    volumes:
      - ${PWD}/data:/data:rw
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_SANDBOX_ROOT=/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mcp-discovery:
        condition: service_started
        required: false

  # ==== MCP Git Service ====
  # Role: Git repository operations (clone, push, pull, blame, log)
  # Capabilities: SSH key support, branch management, history analysis
  mcp-git:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/git
      dockerfile: dockerfile
    image: mcp-git:latest
    container_name: mcp-git
    hostname: mcp-git
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.36
    ports:
      - "5008:5008"
    volumes:
      - ${PWD}/server:/workspace:rw
      - ~/.ssh:/root/.ssh:ro
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mcp-discovery:
        condition: service_started
        required: false

  # ==== MCP GitHub Service ====
  # Role: GitHub API integration (repositories, issues, PRs, discussions)
  # Authentication: GITHUB_TOKEN environment variable (from .env)
  # Rate Limiting: Respects GitHub API rate limits (60 public, 5000 authenticated)
  mcp-github:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/github
      dockerfile: dockerfile
    image: mcp-github:latest
    container_name: mcp-github
    hostname: mcp-github
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.37
    ports:
      - "5009:5009"
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mcp-discovery:
        condition: service_started
        required: false

  # ==== MCP MarkItDown Service ====
  # Role: PDF/document conversion to markdown
  # Formats Supported: PDF, Word, PowerPoint, HTML, Excel
  # Libraries: markitdown (Microsoft), pypdf2, docx, pptx, beautifulsoup4
  mcp-markitdown:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/markitdown
      dockerfile: dockerfile
    image: mcp-markitdown:latest
    container_name: mcp-markitdown
    hostname: mcp-markitdown
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.38
    ports:
      - "5010:5010"
    volumes:
      - ${PWD}/data:/data:rw
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_UPLOAD_DIR=/data/uploads
      - MCP_MAX_FILE_SIZE=104857600
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mcp-discovery:
        condition: service_started
        required: false

  # ==== MCP Memory Service ====
  # Role: Persistent conversation memory, context caching, knowledge base
  # Storage: Redis backend (external: true)
  # TTL: Configurable context expiration, auto-cleanup
  mcp-memory:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/memory
      dockerfile: dockerfile
    image: mcp-memory:latest
    container_name: mcp-memory
    hostname: mcp-memory
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.39
    ports:
      - "5011:5011"
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
      - MCP_MEMORY_TTL=86400
      - MCP_MEMORY_MAX_SIZE=1000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mcp-discovery:
        condition: service_started
        required: false

  # ==== MCP Python Service ====
  # Role: Python code execution, analysis, and transformation
  # Runtime: Python 3.14t (free-threading)
  # Sandboxing: Restricted environment, no system access
  # Libraries: Scientific stack (numpy, pandas, matplotlib, scikit-learn)
  mcp-python:
    build:
      context: ./.devcontainer/infrastructure/mcp-servers/python
      dockerfile: dockerfile
    image: mcp-python:latest
    container_name: mcp-python
    hostname: mcp-python
    networks:
      mcp-cluster:
        ipv4_address: 172.28.0.40
    ports:
      - "5012:5012"
    volumes:
      - ${PWD}/data:/data:rw
    env_file:
      - devcontainer.env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHON_RUNTIME=3.14t
      - MCP_SANDBOX_MODE=strict
      - MCP_EXECUTION_TIMEOUT=30
      - MCP_OUTPUT_MAX_SIZE=1048576
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mcp-discovery:
        condition: service_started
        required: false

networks:
  mcp-cluster:
    name: mcp-cluster
    external: true

# Note: Service discovery automatically registers all MCP services with mcp-discovery
# Health dashboard available at http://localhost:9097/services
# Each service follows MCP v1.0 protocol with standard health checks and metrics
